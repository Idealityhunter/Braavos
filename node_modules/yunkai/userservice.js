//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./users_types');
//HELPER FUNCTIONS AND STRUCTURES

userservice_getUserById_args = function(args) {
  this.userId = null;
  this.fields = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
userservice_getUserById_args.prototype = {};
userservice_getUserById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.fields = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32();
          this.fields.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserById_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserById_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter31 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter31))
      {
        iter31 = this.fields[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserById_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getUserById_result.prototype = {};
userservice_getUserById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserById_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUsersById_args = function(args) {
  this.userIdList = null;
  this.fields = null;
  if (args) {
    if (args.userIdList !== undefined) {
      this.userIdList = args.userIdList;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
userservice_getUsersById_args.prototype = {};
userservice_getUsersById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.userIdList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI64();
          this.userIdList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.fields = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readI32();
          this.fields.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUsersById_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUsersById_args');
  if (this.userIdList !== null && this.userIdList !== undefined) {
    output.writeFieldBegin('userIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.userIdList.length);
    for (var iter46 in this.userIdList)
    {
      if (this.userIdList.hasOwnProperty(iter46))
      {
        iter46 = this.userIdList[iter46];
        output.writeI64(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter47 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter47))
      {
        iter47 = this.fields[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUsersById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
userservice_getUsersById_result.prototype = {};
userservice_getUsersById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size48 = 0;
        var _rtmp352;
        this.success = {};
        var _ktype49 = 0;
        var _vtype50 = 0;
        _rtmp352 = input.readMapBegin();
        _ktype49 = _rtmp352.ktype;
        _vtype50 = _rtmp352.vtype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var key54 = null;
          var val55 = null;
          key54 = input.readI64();
          val55 = new ttypes.UserInfo();
          val55.read(input);
          this.success[key54] = val55;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUsersById_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUsersById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter56 in this.success)
    {
      if (this.success.hasOwnProperty(kiter56))
      {
        var viter57 = this.success[kiter56];
        output.writeI64(kiter56);
        viter57.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateUserInfo_args = function(args) {
  this.userId = null;
  this.userInfo = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.userInfo !== undefined) {
      this.userInfo = args.userInfo;
    }
  }
};
userservice_updateUserInfo_args.prototype = {};
userservice_updateUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size58 = 0;
        var _rtmp362;
        this.userInfo = {};
        var _ktype59 = 0;
        var _vtype60 = 0;
        _rtmp362 = input.readMapBegin();
        _ktype59 = _rtmp362.ktype;
        _vtype60 = _rtmp362.vtype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var key64 = null;
          var val65 = null;
          key64 = input.readI32();
          val65 = input.readString();
          this.userInfo[key64] = val65;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateUserInfo_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.userInfo !== null && this.userInfo !== undefined) {
    output.writeFieldBegin('userInfo', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.userInfo));
    for (var kiter66 in this.userInfo)
    {
      if (this.userInfo.hasOwnProperty(kiter66))
      {
        var viter67 = this.userInfo[kiter66];
        output.writeI32(kiter66);
        output.writeString(viter67);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateUserInfo_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_updateUserInfo_result.prototype = {};
userservice_updateUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.NotFoundException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateUserInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isContact_args = function(args) {
  this.userA = null;
  this.userB = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined) {
      this.userB = args.userB;
    }
  }
};
userservice_isContact_args.prototype = {};
userservice_isContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isContact_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_isContact_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isContact_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_isContact_result.prototype = {};
userservice_isContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isContact_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_isContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_sendContactRequest_args = function(args) {
  this.sender = null;
  this.receiver = null;
  this.message = null;
  if (args) {
    if (args.sender !== undefined) {
      this.sender = args.sender;
    }
    if (args.receiver !== undefined) {
      this.receiver = args.receiver;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
userservice_sendContactRequest_args.prototype = {};
userservice_sendContactRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sender = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.receiver = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_sendContactRequest_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_sendContactRequest_args');
  if (this.sender !== null && this.sender !== undefined) {
    output.writeFieldBegin('sender', Thrift.Type.I64, 1);
    output.writeI64(this.sender);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.I64, 2);
    output.writeI64(this.receiver);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_sendContactRequest_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidStateException) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined) {
      this.ex3 = args.ex3;
    }
  }
};
userservice_sendContactRequest_result.prototype = {};
userservice_sendContactRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.NotFoundException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidStateException();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_sendContactRequest_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_sendContactRequest_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_acceptContactRequest_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined) {
      this.requestId = args.requestId;
    }
  }
};
userservice_acceptContactRequest_args.prototype = {};
userservice_acceptContactRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_acceptContactRequest_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_acceptContactRequest_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_acceptContactRequest_result = function(args) {
  this.ex = null;
  this.ex2 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args instanceof ttypes.InvalidStateException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_acceptContactRequest_result.prototype = {};
userservice_acceptContactRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidStateException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_acceptContactRequest_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_acceptContactRequest_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_rejectContactRequest_args = function(args) {
  this.requestId = null;
  this.message = null;
  if (args) {
    if (args.requestId !== undefined) {
      this.requestId = args.requestId;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
userservice_rejectContactRequest_args.prototype = {};
userservice_rejectContactRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_rejectContactRequest_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_rejectContactRequest_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_rejectContactRequest_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidStateException) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined) {
      this.ex3 = args.ex3;
    }
  }
};
userservice_rejectContactRequest_result.prototype = {};
userservice_rejectContactRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.NotFoundException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidStateException();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_rejectContactRequest_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_rejectContactRequest_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_cancelContactRequest_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined) {
      this.requestId = args.requestId;
    }
  }
};
userservice_cancelContactRequest_args.prototype = {};
userservice_cancelContactRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_cancelContactRequest_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_cancelContactRequest_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_cancelContactRequest_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_cancelContactRequest_result.prototype = {};
userservice_cancelContactRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_cancelContactRequest_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_cancelContactRequest_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactRequests_args = function(args) {
  this.userId = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
  }
};
userservice_getContactRequests_args.prototype = {};
userservice_getContactRequests_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactRequests_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactRequests_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 2);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactRequests_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getContactRequests_result.prototype = {};
userservice_getContactRequests_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.success = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = new ttypes.ContactRequest();
          elem74.read(input);
          this.success.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactRequests_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactRequests_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter75 in this.success)
    {
      if (this.success.hasOwnProperty(iter75))
      {
        iter75 = this.success[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContact_args = function(args) {
  this.userA = null;
  this.userB = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined) {
      this.userB = args.userB;
    }
  }
};
userservice_addContact_args.prototype = {};
userservice_addContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContact_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContact_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContact_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_addContact_result.prototype = {};
userservice_addContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContact_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContact_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContacts_args = function(args) {
  this.userA = null;
  this.targets = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.targets !== undefined) {
      this.targets = args.targets;
    }
  }
};
userservice_addContacts_args.prototype = {};
userservice_addContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.targets = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = input.readI64();
          this.targets.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContacts_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContacts_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.targets.length);
    for (var iter83 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter83))
      {
        iter83 = this.targets[iter83];
        output.writeI64(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContacts_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_addContacts_result.prototype = {};
userservice_addContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContacts_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContacts_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContact_args = function(args) {
  this.userA = null;
  this.userB = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined) {
      this.userB = args.userB;
    }
  }
};
userservice_removeContact_args.prototype = {};
userservice_removeContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContact_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContact_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContact_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_removeContact_result.prototype = {};
userservice_removeContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContact_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContact_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContacts_args = function(args) {
  this.userA = null;
  this.targets = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.targets !== undefined) {
      this.targets = args.targets;
    }
  }
};
userservice_removeContacts_args.prototype = {};
userservice_removeContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.targets = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readI64();
          this.targets.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContacts_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContacts_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.targets.length);
    for (var iter91 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter91))
      {
        iter91 = this.targets[iter91];
        output.writeI64(iter91);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContacts_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_removeContacts_result.prototype = {};
userservice_removeContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContacts_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContacts_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactList_args = function(args) {
  this.userId = null;
  this.fields = null;
  this.offset = null;
  this.count = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
userservice_getContactList_args.prototype = {};
userservice_getContactList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.fields = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = input.readI32();
          this.fields.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactList_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactList_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter99 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter99))
      {
        iter99 = this.fields[iter99];
        output.writeI32(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getContactList_result.prototype = {};
userservice_getContactList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.success = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = new ttypes.UserInfo();
          elem106.read(input);
          this.success.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactList_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter107 in this.success)
    {
      if (this.success.hasOwnProperty(iter107))
      {
        iter107 = this.success[iter107];
        iter107.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactCount_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
userservice_getContactCount_args.prototype = {};
userservice_getContactCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactCount_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactCount_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactCount_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getContactCount_result.prototype = {};
userservice_getContactCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactCount_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_login_args = function(args) {
  this.loginName = null;
  this.password = null;
  this.source = null;
  if (args) {
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
userservice_login_args.prototype = {};
userservice_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_login_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_login_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 3);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_login_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.AuthException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_login_result.prototype = {};
userservice_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.AuthException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_login_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_verifyCredential_args = function(args) {
  this.userId = null;
  this.password = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
userservice_verifyCredential_args.prototype = {};
userservice_verifyCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_verifyCredential_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_verifyCredential_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_verifyCredential_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.AuthException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_verifyCredential_result.prototype = {};
userservice_verifyCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.AuthException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_verifyCredential_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_verifyCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_sendValidationCode_args = function(args) {
  this.action = null;
  this.countryCode = null;
  this.tel = null;
  this.userId = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.countryCode !== undefined) {
      this.countryCode = args.countryCode;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
userservice_sendValidationCode_args.prototype = {};
userservice_sendValidationCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.countryCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_sendValidationCode_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_sendValidationCode_args');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.I32, 2);
    output.writeI32(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 3);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 4);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_sendValidationCode_result = function(args) {
  this.ex = null;
  this.ex2 = null;
  if (args instanceof ttypes.OverQuotaLimitException) {
    this.ex = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_sendValidationCode_result.prototype = {};
userservice_sendValidationCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.OverQuotaLimitException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_sendValidationCode_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_sendValidationCode_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_checkValidationCode_args = function(args) {
  this.code = null;
  this.action = null;
  this.countryCode = null;
  this.tel = null;
  this.userId = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.countryCode !== undefined) {
      this.countryCode = args.countryCode;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
userservice_checkValidationCode_args.prototype = {};
userservice_checkValidationCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.countryCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_checkValidationCode_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_checkValidationCode_args');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 2);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.I32, 3);
    output.writeI32(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 4);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 5);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_checkValidationCode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.ValidationCodeException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_checkValidationCode_result.prototype = {};
userservice_checkValidationCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.ValidationCodeException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_checkValidationCode_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_checkValidationCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_resetPassword_args = function(args) {
  this.userId = null;
  this.oldPassword = null;
  this.newPassword = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.oldPassword !== undefined) {
      this.oldPassword = args.oldPassword;
    }
    if (args.newPassword !== undefined) {
      this.newPassword = args.newPassword;
    }
  }
};
userservice_resetPassword_args.prototype = {};
userservice_resetPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oldPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_resetPassword_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_resetPassword_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.oldPassword !== null && this.oldPassword !== undefined) {
    output.writeFieldBegin('oldPassword', Thrift.Type.STRING, 2);
    output.writeString(this.oldPassword);
    output.writeFieldEnd();
  }
  if (this.newPassword !== null && this.newPassword !== undefined) {
    output.writeFieldBegin('newPassword', Thrift.Type.STRING, 3);
    output.writeString(this.newPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_resetPassword_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.AuthException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_resetPassword_result.prototype = {};
userservice_resetPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidArgsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.AuthException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_resetPassword_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_resetPassword_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_resetPasswordByToken_args = function(args) {
  this.userId = null;
  this.newPassword = null;
  this.token = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.newPassword !== undefined) {
      this.newPassword = args.newPassword;
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
userservice_resetPasswordByToken_args.prototype = {};
userservice_resetPasswordByToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_resetPasswordByToken_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_resetPasswordByToken_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.newPassword !== null && this.newPassword !== undefined) {
    output.writeFieldBegin('newPassword', Thrift.Type.STRING, 2);
    output.writeString(this.newPassword);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_resetPasswordByToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.AuthException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_resetPasswordByToken_result.prototype = {};
userservice_resetPasswordByToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidArgsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.AuthException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_resetPasswordByToken_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_resetPasswordByToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateTelNumber_args = function(args) {
  this.userId = null;
  this.tel = null;
  this.token = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
userservice_updateTelNumber_args.prototype = {};
userservice_updateTelNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateTelNumber_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateTelNumber_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 2);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateTelNumber_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_updateTelNumber_result.prototype = {};
userservice_updateTelNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.NotFoundException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateTelNumber_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateTelNumber_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createUser_args = function(args) {
  this.nickName = null;
  this.password = null;
  this.miscInfo = null;
  if (args) {
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.miscInfo !== undefined) {
      this.miscInfo = args.miscInfo;
    }
  }
};
userservice_createUser_args.prototype = {};
userservice_createUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size108 = 0;
        var _rtmp3112;
        this.miscInfo = {};
        var _ktype109 = 0;
        var _vtype110 = 0;
        _rtmp3112 = input.readMapBegin();
        _ktype109 = _rtmp3112.ktype;
        _vtype110 = _rtmp3112.vtype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var key114 = null;
          var val115 = null;
          key114 = input.readI32();
          val115 = input.readString();
          this.miscInfo[key114] = val115;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createUser_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_createUser_args');
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 1);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.miscInfo !== null && this.miscInfo !== undefined) {
    output.writeFieldBegin('miscInfo', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.miscInfo));
    for (var kiter116 in this.miscInfo)
    {
      if (this.miscInfo.hasOwnProperty(kiter116))
      {
        var viter117 = this.miscInfo[kiter116];
        output.writeI32(kiter116);
        output.writeString(viter117);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createUser_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.UserExistsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_createUser_result.prototype = {};
userservice_createUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.UserExistsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createUser_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_createUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_searchUserInfo_args = function(args) {
  this.queryFields = null;
  this.fields = null;
  this.offset = null;
  this.count = null;
  if (args) {
    if (args.queryFields !== undefined) {
      this.queryFields = args.queryFields;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
userservice_searchUserInfo_args.prototype = {};
userservice_searchUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size118 = 0;
        var _rtmp3122;
        this.queryFields = {};
        var _ktype119 = 0;
        var _vtype120 = 0;
        _rtmp3122 = input.readMapBegin();
        _ktype119 = _rtmp3122.ktype;
        _vtype120 = _rtmp3122.vtype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var key124 = null;
          var val125 = null;
          key124 = input.readI32();
          val125 = input.readString();
          this.queryFields[key124] = val125;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size126 = 0;
        var _rtmp3130;
        this.fields = [];
        var _etype129 = 0;
        _rtmp3130 = input.readListBegin();
        _etype129 = _rtmp3130.etype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var elem132 = null;
          elem132 = input.readI32();
          this.fields.push(elem132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_searchUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_searchUserInfo_args');
  if (this.queryFields !== null && this.queryFields !== undefined) {
    output.writeFieldBegin('queryFields', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.queryFields));
    for (var kiter133 in this.queryFields)
    {
      if (this.queryFields.hasOwnProperty(kiter133))
      {
        var viter134 = this.queryFields[kiter133];
        output.writeI32(kiter133);
        output.writeString(viter134);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter135 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter135))
      {
        iter135 = this.fields[iter135];
        output.writeI32(iter135);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_searchUserInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
userservice_searchUserInfo_result.prototype = {};
userservice_searchUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.success = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new ttypes.UserInfo();
          elem142.read(input);
          this.success.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_searchUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_searchUserInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter143 in this.success)
    {
      if (this.success.hasOwnProperty(iter143))
      {
        iter143 = this.success[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createChatGroup_args = function(args) {
  this.creator = null;
  this.participants = null;
  this.chatGroupProps = null;
  if (args) {
    if (args.creator !== undefined) {
      this.creator = args.creator;
    }
    if (args.participants !== undefined) {
      this.participants = args.participants;
    }
    if (args.chatGroupProps !== undefined) {
      this.chatGroupProps = args.chatGroupProps;
    }
  }
};
userservice_createChatGroup_args.prototype = {};
userservice_createChatGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.creator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.participants = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = input.readI64();
          this.participants.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size151 = 0;
        var _rtmp3155;
        this.chatGroupProps = {};
        var _ktype152 = 0;
        var _vtype153 = 0;
        _rtmp3155 = input.readMapBegin();
        _ktype152 = _rtmp3155.ktype;
        _vtype153 = _rtmp3155.vtype;
        _size151 = _rtmp3155.size;
        for (var _i156 = 0; _i156 < _size151; ++_i156)
        {
          var key157 = null;
          var val158 = null;
          key157 = input.readI32();
          val158 = input.readString();
          this.chatGroupProps[key157] = val158;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createChatGroup_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_createChatGroup_args');
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.I64, 1);
    output.writeI64(this.creator);
    output.writeFieldEnd();
  }
  if (this.participants !== null && this.participants !== undefined) {
    output.writeFieldBegin('participants', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.participants.length);
    for (var iter159 in this.participants)
    {
      if (this.participants.hasOwnProperty(iter159))
      {
        iter159 = this.participants[iter159];
        output.writeI64(iter159);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.chatGroupProps !== null && this.chatGroupProps !== undefined) {
    output.writeFieldBegin('chatGroupProps', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.chatGroupProps));
    for (var kiter160 in this.chatGroupProps)
    {
      if (this.chatGroupProps.hasOwnProperty(kiter160))
      {
        var viter161 = this.chatGroupProps[kiter160];
        output.writeI32(kiter160);
        output.writeString(viter161);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createChatGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.NotFoundException) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.GroupMembersLimitException) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined) {
      this.ex3 = args.ex3;
    }
  }
};
userservice_createChatGroup_result.prototype = {};
userservice_createChatGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidArgsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.NotFoundException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.GroupMembersLimitException();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createChatGroup_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_createChatGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateChatGroup_args = function(args) {
  this.chatGroupId = null;
  this.chatGroupProps = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.chatGroupProps !== undefined) {
      this.chatGroupProps = args.chatGroupProps;
    }
  }
};
userservice_updateChatGroup_args.prototype = {};
userservice_updateChatGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size162 = 0;
        var _rtmp3166;
        this.chatGroupProps = {};
        var _ktype163 = 0;
        var _vtype164 = 0;
        _rtmp3166 = input.readMapBegin();
        _ktype163 = _rtmp3166.ktype;
        _vtype164 = _rtmp3166.vtype;
        _size162 = _rtmp3166.size;
        for (var _i167 = 0; _i167 < _size162; ++_i167)
        {
          var key168 = null;
          var val169 = null;
          key168 = input.readI32();
          val169 = input.readString();
          this.chatGroupProps[key168] = val169;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateChatGroup_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateChatGroup_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.chatGroupProps !== null && this.chatGroupProps !== undefined) {
    output.writeFieldBegin('chatGroupProps', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.chatGroupProps));
    for (var kiter170 in this.chatGroupProps)
    {
      if (this.chatGroupProps.hasOwnProperty(kiter170))
      {
        var viter171 = this.chatGroupProps[kiter170];
        output.writeI32(kiter170);
        output.writeString(viter171);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateChatGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.NotFoundException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_updateChatGroup_result.prototype = {};
userservice_updateChatGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidArgsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.NotFoundException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateChatGroup_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateChatGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroup_args = function(args) {
  this.chatGroupId = null;
  this.fields = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
userservice_getChatGroup_args.prototype = {};
userservice_getChatGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.fields = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = input.readI32();
          this.fields.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroup_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroup_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter179 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter179))
      {
        iter179 = this.fields[iter179];
        output.writeI32(iter179);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroup_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getChatGroup_result.prototype = {};
userservice_getChatGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroup_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroups_args = function(args) {
  this.groupIdList = null;
  this.fields = null;
  if (args) {
    if (args.groupIdList !== undefined) {
      this.groupIdList = args.groupIdList;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
userservice_getChatGroups_args.prototype = {};
userservice_getChatGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size180 = 0;
        var _rtmp3184;
        this.groupIdList = [];
        var _etype183 = 0;
        _rtmp3184 = input.readListBegin();
        _etype183 = _rtmp3184.etype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var elem186 = null;
          elem186 = input.readI64();
          this.groupIdList.push(elem186);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size187 = 0;
        var _rtmp3191;
        this.fields = [];
        var _etype190 = 0;
        _rtmp3191 = input.readListBegin();
        _etype190 = _rtmp3191.etype;
        _size187 = _rtmp3191.size;
        for (var _i192 = 0; _i192 < _size187; ++_i192)
        {
          var elem193 = null;
          elem193 = input.readI32();
          this.fields.push(elem193);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroups_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.groupIdList.length);
    for (var iter194 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter194))
      {
        iter194 = this.groupIdList[iter194];
        output.writeI64(iter194);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter195 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter195))
      {
        iter195 = this.fields[iter195];
        output.writeI32(iter195);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroups_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
userservice_getChatGroups_result.prototype = {};
userservice_getChatGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size196 = 0;
        var _rtmp3200;
        this.success = {};
        var _ktype197 = 0;
        var _vtype198 = 0;
        _rtmp3200 = input.readMapBegin();
        _ktype197 = _rtmp3200.ktype;
        _vtype198 = _rtmp3200.vtype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var key202 = null;
          var val203 = null;
          key202 = input.readI64();
          val203 = new ttypes.ChatGroup();
          val203.read(input);
          this.success[key202] = val203;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroups_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter204 in this.success)
    {
      if (this.success.hasOwnProperty(kiter204))
      {
        var viter205 = this.success[kiter204];
        output.writeI64(kiter204);
        viter205.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroups_args = function(args) {
  this.userId = null;
  this.fields = null;
  this.offset = null;
  this.count = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
userservice_getUserChatGroups_args.prototype = {};
userservice_getUserChatGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size206 = 0;
        var _rtmp3210;
        this.fields = [];
        var _etype209 = 0;
        _rtmp3210 = input.readListBegin();
        _etype209 = _rtmp3210.etype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          var elem212 = null;
          elem212 = input.readI32();
          this.fields.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroups_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroups_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter213 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter213))
      {
        iter213 = this.fields[iter213];
        output.writeI32(iter213);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroups_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getUserChatGroups_result.prototype = {};
userservice_getUserChatGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size214 = 0;
        var _rtmp3218;
        this.success = [];
        var _etype217 = 0;
        _rtmp3218 = input.readListBegin();
        _etype217 = _rtmp3218.etype;
        _size214 = _rtmp3218.size;
        for (var _i219 = 0; _i219 < _size214; ++_i219)
        {
          var elem220 = null;
          elem220 = new ttypes.ChatGroup();
          elem220.read(input);
          this.success.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroups_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter221 in this.success)
    {
      if (this.success.hasOwnProperty(iter221))
      {
        iter221 = this.success[iter221];
        iter221.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroupCount_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
userservice_getUserChatGroupCount_args.prototype = {};
userservice_getUserChatGroupCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroupCount_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroupCount_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroupCount_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getUserChatGroupCount_result.prototype = {};
userservice_getUserChatGroupCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroupCount_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroupCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addChatGroupMembers_args = function(args) {
  this.chatGroupId = null;
  this.operatorId = null;
  this.userIds = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.operatorId !== undefined) {
      this.operatorId = args.operatorId;
    }
    if (args.userIds !== undefined) {
      this.userIds = args.userIds;
    }
  }
};
userservice_addChatGroupMembers_args.prototype = {};
userservice_addChatGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.operatorId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size222 = 0;
        var _rtmp3226;
        this.userIds = [];
        var _etype225 = 0;
        _rtmp3226 = input.readListBegin();
        _etype225 = _rtmp3226.etype;
        _size222 = _rtmp3226.size;
        for (var _i227 = 0; _i227 < _size222; ++_i227)
        {
          var elem228 = null;
          elem228 = input.readI64();
          this.userIds.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addChatGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_addChatGroupMembers_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.I64, 2);
    output.writeI64(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter229 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter229))
      {
        iter229 = this.userIds[iter229];
        output.writeI64(iter229);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addChatGroupMembers_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_addChatGroupMembers_result.prototype = {};
userservice_addChatGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size230 = 0;
        var _rtmp3234;
        this.success = [];
        var _etype233 = 0;
        _rtmp3234 = input.readListBegin();
        _etype233 = _rtmp3234.etype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var elem236 = null;
          elem236 = input.readI64();
          this.success.push(elem236);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addChatGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_addChatGroupMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I64, this.success.length);
    for (var iter237 in this.success)
    {
      if (this.success.hasOwnProperty(iter237))
      {
        iter237 = this.success[iter237];
        output.writeI64(iter237);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeChatGroupMembers_args = function(args) {
  this.chatGroupId = null;
  this.operatorId = null;
  this.userIds = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.operatorId !== undefined) {
      this.operatorId = args.operatorId;
    }
    if (args.userIds !== undefined) {
      this.userIds = args.userIds;
    }
  }
};
userservice_removeChatGroupMembers_args.prototype = {};
userservice_removeChatGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.operatorId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size238 = 0;
        var _rtmp3242;
        this.userIds = [];
        var _etype241 = 0;
        _rtmp3242 = input.readListBegin();
        _etype241 = _rtmp3242.etype;
        _size238 = _rtmp3242.size;
        for (var _i243 = 0; _i243 < _size238; ++_i243)
        {
          var elem244 = null;
          elem244 = input.readI64();
          this.userIds.push(elem244);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeChatGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeChatGroupMembers_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.I64, 2);
    output.writeI64(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter245 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter245))
      {
        iter245 = this.userIds[iter245];
        output.writeI64(iter245);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeChatGroupMembers_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_removeChatGroupMembers_result.prototype = {};
userservice_removeChatGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size246 = 0;
        var _rtmp3250;
        this.success = [];
        var _etype249 = 0;
        _rtmp3250 = input.readListBegin();
        _etype249 = _rtmp3250.etype;
        _size246 = _rtmp3250.size;
        for (var _i251 = 0; _i251 < _size246; ++_i251)
        {
          var elem252 = null;
          elem252 = input.readI64();
          this.success.push(elem252);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeChatGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeChatGroupMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I64, this.success.length);
    for (var iter253 in this.success)
    {
      if (this.success.hasOwnProperty(iter253))
      {
        iter253 = this.success[iter253];
        output.writeI64(iter253);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroupMembers_args = function(args) {
  this.chatGroupId = null;
  this.fields = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
userservice_getChatGroupMembers_args.prototype = {};
userservice_getChatGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size254 = 0;
        var _rtmp3258;
        this.fields = [];
        var _etype257 = 0;
        _rtmp3258 = input.readListBegin();
        _etype257 = _rtmp3258.etype;
        _size254 = _rtmp3258.size;
        for (var _i259 = 0; _i259 < _size254; ++_i259)
        {
          var elem260 = null;
          elem260 = input.readI32();
          this.fields.push(elem260);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroupMembers_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter261 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter261))
      {
        iter261 = this.fields[iter261];
        output.writeI32(iter261);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroupMembers_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getChatGroupMembers_result.prototype = {};
userservice_getChatGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size262 = 0;
        var _rtmp3266;
        this.success = [];
        var _etype265 = 0;
        _rtmp3266 = input.readListBegin();
        _etype265 = _rtmp3266.etype;
        _size262 = _rtmp3266.size;
        for (var _i267 = 0; _i267 < _size262; ++_i267)
        {
          var elem268 = null;
          elem268 = new ttypes.UserInfo();
          elem268.read(input);
          this.success.push(elem268);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroupMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter269 in this.success)
    {
      if (this.success.hasOwnProperty(iter269))
      {
        iter269 = this.success[iter269];
        iter269.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userserviceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
userserviceClient.prototype = {};
userserviceClient.prototype.seqid = function() { return this._seqid; }
userserviceClient.prototype.new_seqid = function() { return this._seqid += 1; }
userserviceClient.prototype.getUserById = function(userId, fields, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserById(userId, fields);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserById(userId, fields);
  }
};

userserviceClient.prototype.send_getUserById = function(userId, fields) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserById', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUserById_args();
  args.userId = userId;
  args.fields = fields;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUserById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUserById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserById failed: unknown result');
};
userserviceClient.prototype.getUsersById = function(userIdList, fields, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUsersById(userIdList, fields);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUsersById(userIdList, fields);
  }
};

userserviceClient.prototype.send_getUsersById = function(userIdList, fields) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUsersById', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUsersById_args();
  args.userIdList = userIdList;
  args.fields = fields;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUsersById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUsersById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUsersById failed: unknown result');
};
userserviceClient.prototype.updateUserInfo = function(userId, userInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUserInfo(userId, userInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUserInfo(userId, userInfo);
  }
};

userserviceClient.prototype.send_updateUserInfo = function(userId, userInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUserInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateUserInfo_args();
  args.userId = userId;
  args.userInfo = userInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateUserInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateUserInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateUserInfo failed: unknown result');
};
userserviceClient.prototype.isContact = function(userA, userB, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isContact(userA, userB);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isContact(userA, userB);
  }
};

userserviceClient.prototype.send_isContact = function(userA, userB) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isContact', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_isContact_args();
  args.userA = userA;
  args.userB = userB;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_isContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_isContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isContact failed: unknown result');
};
userserviceClient.prototype.sendContactRequest = function(sender, receiver, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendContactRequest(sender, receiver, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendContactRequest(sender, receiver, message);
  }
};

userserviceClient.prototype.send_sendContactRequest = function(sender, receiver, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendContactRequest', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_sendContactRequest_args();
  args.sender = sender;
  args.receiver = receiver;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_sendContactRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_sendContactRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendContactRequest failed: unknown result');
};
userserviceClient.prototype.acceptContactRequest = function(requestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acceptContactRequest(requestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acceptContactRequest(requestId);
  }
};

userserviceClient.prototype.send_acceptContactRequest = function(requestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acceptContactRequest', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_acceptContactRequest_args();
  args.requestId = requestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_acceptContactRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_acceptContactRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
userserviceClient.prototype.rejectContactRequest = function(requestId, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rejectContactRequest(requestId, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rejectContactRequest(requestId, message);
  }
};

userserviceClient.prototype.send_rejectContactRequest = function(requestId, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rejectContactRequest', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_rejectContactRequest_args();
  args.requestId = requestId;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_rejectContactRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_rejectContactRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  callback(null)
};
userserviceClient.prototype.cancelContactRequest = function(requestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelContactRequest(requestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelContactRequest(requestId);
  }
};

userserviceClient.prototype.send_cancelContactRequest = function(requestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelContactRequest', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_cancelContactRequest_args();
  args.requestId = requestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_cancelContactRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_cancelContactRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.getContactRequests = function(userId, offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContactRequests(userId, offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContactRequests(userId, offset, limit);
  }
};

userserviceClient.prototype.send_getContactRequests = function(userId, offset, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContactRequests', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getContactRequests_args();
  args.userId = userId;
  args.offset = offset;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getContactRequests = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getContactRequests_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContactRequests failed: unknown result');
};
userserviceClient.prototype.addContact = function(userA, userB, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addContact(userA, userB);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addContact(userA, userB);
  }
};

userserviceClient.prototype.send_addContact = function(userA, userB) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addContact', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_addContact_args();
  args.userA = userA;
  args.userB = userB;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_addContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_addContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.addContacts = function(userA, targets, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addContacts(userA, targets);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addContacts(userA, targets);
  }
};

userserviceClient.prototype.send_addContacts = function(userA, targets) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_addContacts_args();
  args.userA = userA;
  args.targets = targets;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_addContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_addContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.removeContact = function(userA, userB, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeContact(userA, userB);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeContact(userA, userB);
  }
};

userserviceClient.prototype.send_removeContact = function(userA, userB) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeContact', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_removeContact_args();
  args.userA = userA;
  args.userB = userB;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_removeContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_removeContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.removeContacts = function(userA, targets, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeContacts(userA, targets);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeContacts(userA, targets);
  }
};

userserviceClient.prototype.send_removeContacts = function(userA, targets) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_removeContacts_args();
  args.userA = userA;
  args.targets = targets;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_removeContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_removeContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.getContactList = function(userId, fields, offset, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContactList(userId, fields, offset, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContactList(userId, fields, offset, count);
  }
};

userserviceClient.prototype.send_getContactList = function(userId, fields, offset, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContactList', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getContactList_args();
  args.userId = userId;
  args.fields = fields;
  args.offset = offset;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getContactList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getContactList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContactList failed: unknown result');
};
userserviceClient.prototype.getContactCount = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContactCount(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContactCount(userId);
  }
};

userserviceClient.prototype.send_getContactCount = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContactCount', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getContactCount_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getContactCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getContactCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContactCount failed: unknown result');
};
userserviceClient.prototype.login = function(loginName, password, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_login(loginName, password, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_login(loginName, password, source);
  }
};

userserviceClient.prototype.send_login = function(loginName, password, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_login_args();
  args.loginName = loginName;
  args.password = password;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('login failed: unknown result');
};
userserviceClient.prototype.verifyCredential = function(userId, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyCredential(userId, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyCredential(userId, password);
  }
};

userserviceClient.prototype.send_verifyCredential = function(userId, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_verifyCredential_args();
  args.userId = userId;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_verifyCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_verifyCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyCredential failed: unknown result');
};
userserviceClient.prototype.sendValidationCode = function(action, countryCode, tel, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendValidationCode(action, countryCode, tel, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendValidationCode(action, countryCode, tel, userId);
  }
};

userserviceClient.prototype.send_sendValidationCode = function(action, countryCode, tel, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendValidationCode', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_sendValidationCode_args();
  args.action = action;
  args.countryCode = countryCode;
  args.tel = tel;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_sendValidationCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_sendValidationCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
userserviceClient.prototype.checkValidationCode = function(code, action, countryCode, tel, userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkValidationCode(code, action, countryCode, tel, userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkValidationCode(code, action, countryCode, tel, userId);
  }
};

userserviceClient.prototype.send_checkValidationCode = function(code, action, countryCode, tel, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkValidationCode', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_checkValidationCode_args();
  args.code = code;
  args.action = action;
  args.countryCode = countryCode;
  args.tel = tel;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_checkValidationCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_checkValidationCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkValidationCode failed: unknown result');
};
userserviceClient.prototype.resetPassword = function(userId, oldPassword, newPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resetPassword(userId, oldPassword, newPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resetPassword(userId, oldPassword, newPassword);
  }
};

userserviceClient.prototype.send_resetPassword = function(userId, oldPassword, newPassword) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resetPassword', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_resetPassword_args();
  args.userId = userId;
  args.oldPassword = oldPassword;
  args.newPassword = newPassword;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_resetPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_resetPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
userserviceClient.prototype.resetPasswordByToken = function(userId, newPassword, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resetPasswordByToken(userId, newPassword, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resetPasswordByToken(userId, newPassword, token);
  }
};

userserviceClient.prototype.send_resetPasswordByToken = function(userId, newPassword, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resetPasswordByToken', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_resetPasswordByToken_args();
  args.userId = userId;
  args.newPassword = newPassword;
  args.token = token;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_resetPasswordByToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_resetPasswordByToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
userserviceClient.prototype.updateTelNumber = function(userId, tel, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateTelNumber(userId, tel, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateTelNumber(userId, tel, token);
  }
};

userserviceClient.prototype.send_updateTelNumber = function(userId, tel, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateTelNumber', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateTelNumber_args();
  args.userId = userId;
  args.tel = tel;
  args.token = token;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateTelNumber = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateTelNumber_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
userserviceClient.prototype.createUser = function(nickName, password, miscInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUser(nickName, password, miscInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUser(nickName, password, miscInfo);
  }
};

userserviceClient.prototype.send_createUser = function(nickName, password, miscInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUser', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_createUser_args();
  args.nickName = nickName;
  args.password = password;
  args.miscInfo = miscInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_createUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_createUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUser failed: unknown result');
};
userserviceClient.prototype.searchUserInfo = function(queryFields, fields, offset, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchUserInfo(queryFields, fields, offset, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchUserInfo(queryFields, fields, offset, count);
  }
};

userserviceClient.prototype.send_searchUserInfo = function(queryFields, fields, offset, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchUserInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_searchUserInfo_args();
  args.queryFields = queryFields;
  args.fields = fields;
  args.offset = offset;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_searchUserInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_searchUserInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchUserInfo failed: unknown result');
};
userserviceClient.prototype.createChatGroup = function(creator, participants, chatGroupProps, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createChatGroup(creator, participants, chatGroupProps);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createChatGroup(creator, participants, chatGroupProps);
  }
};

userserviceClient.prototype.send_createChatGroup = function(creator, participants, chatGroupProps) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createChatGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_createChatGroup_args();
  args.creator = creator;
  args.participants = participants;
  args.chatGroupProps = chatGroupProps;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_createChatGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_createChatGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createChatGroup failed: unknown result');
};
userserviceClient.prototype.updateChatGroup = function(chatGroupId, chatGroupProps, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateChatGroup(chatGroupId, chatGroupProps);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateChatGroup(chatGroupId, chatGroupProps);
  }
};

userserviceClient.prototype.send_updateChatGroup = function(chatGroupId, chatGroupProps) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateChatGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateChatGroup_args();
  args.chatGroupId = chatGroupId;
  args.chatGroupProps = chatGroupProps;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateChatGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateChatGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateChatGroup failed: unknown result');
};
userserviceClient.prototype.getChatGroup = function(chatGroupId, fields, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatGroup(chatGroupId, fields);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatGroup(chatGroupId, fields);
  }
};

userserviceClient.prototype.send_getChatGroup = function(chatGroupId, fields) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getChatGroup_args();
  args.chatGroupId = chatGroupId;
  args.fields = fields;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getChatGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getChatGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatGroup failed: unknown result');
};
userserviceClient.prototype.getChatGroups = function(groupIdList, fields, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatGroups(groupIdList, fields);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatGroups(groupIdList, fields);
  }
};

userserviceClient.prototype.send_getChatGroups = function(groupIdList, fields) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getChatGroups_args();
  args.groupIdList = groupIdList;
  args.fields = fields;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getChatGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getChatGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatGroups failed: unknown result');
};
userserviceClient.prototype.getUserChatGroups = function(userId, fields, offset, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserChatGroups(userId, fields, offset, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserChatGroups(userId, fields, offset, count);
  }
};

userserviceClient.prototype.send_getUserChatGroups = function(userId, fields, offset, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserChatGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUserChatGroups_args();
  args.userId = userId;
  args.fields = fields;
  args.offset = offset;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUserChatGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUserChatGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserChatGroups failed: unknown result');
};
userserviceClient.prototype.getUserChatGroupCount = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserChatGroupCount(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserChatGroupCount(userId);
  }
};

userserviceClient.prototype.send_getUserChatGroupCount = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserChatGroupCount', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUserChatGroupCount_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUserChatGroupCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUserChatGroupCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserChatGroupCount failed: unknown result');
};
userserviceClient.prototype.addChatGroupMembers = function(chatGroupId, operatorId, userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addChatGroupMembers(chatGroupId, operatorId, userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addChatGroupMembers(chatGroupId, operatorId, userIds);
  }
};

userserviceClient.prototype.send_addChatGroupMembers = function(chatGroupId, operatorId, userIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addChatGroupMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_addChatGroupMembers_args();
  args.chatGroupId = chatGroupId;
  args.operatorId = operatorId;
  args.userIds = userIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_addChatGroupMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_addChatGroupMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addChatGroupMembers failed: unknown result');
};
userserviceClient.prototype.removeChatGroupMembers = function(chatGroupId, operatorId, userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeChatGroupMembers(chatGroupId, operatorId, userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeChatGroupMembers(chatGroupId, operatorId, userIds);
  }
};

userserviceClient.prototype.send_removeChatGroupMembers = function(chatGroupId, operatorId, userIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeChatGroupMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_removeChatGroupMembers_args();
  args.chatGroupId = chatGroupId;
  args.operatorId = operatorId;
  args.userIds = userIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_removeChatGroupMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_removeChatGroupMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('removeChatGroupMembers failed: unknown result');
};
userserviceClient.prototype.getChatGroupMembers = function(chatGroupId, fields, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatGroupMembers(chatGroupId, fields);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatGroupMembers(chatGroupId, fields);
  }
};

userserviceClient.prototype.send_getChatGroupMembers = function(chatGroupId, fields) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatGroupMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getChatGroupMembers_args();
  args.chatGroupId = chatGroupId;
  args.fields = fields;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getChatGroupMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getChatGroupMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatGroupMembers failed: unknown result');
};
userserviceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
userserviceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

userserviceProcessor.prototype.process_getUserById = function(seqid, input, output) {
  var args = new userservice_getUserById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserById.length === 2) {
    Q.fcall(this._handler.getUserById, args.userId, args.fields)
      .then(function(result) {
        var result = new userservice_getUserById_result({success: result});
        output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getUserById_result(err);
        output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserById(args.userId, args.fields,  function (err, result) {
      var result = new userservice_getUserById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUsersById = function(seqid, input, output) {
  var args = new userservice_getUsersById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUsersById.length === 2) {
    Q.fcall(this._handler.getUsersById, args.userIdList, args.fields)
      .then(function(result) {
        var result = new userservice_getUsersById_result({success: result});
        output.writeMessageBegin("getUsersById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getUsersById_result(err);
        output.writeMessageBegin("getUsersById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUsersById(args.userIdList, args.fields,  function (err, result) {
      var result = new userservice_getUsersById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUsersById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateUserInfo = function(seqid, input, output) {
  var args = new userservice_updateUserInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUserInfo.length === 2) {
    Q.fcall(this._handler.updateUserInfo, args.userId, args.userInfo)
      .then(function(result) {
        var result = new userservice_updateUserInfo_result({success: result});
        output.writeMessageBegin("updateUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_updateUserInfo_result(err);
        output.writeMessageBegin("updateUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUserInfo(args.userId, args.userInfo,  function (err, result) {
      var result = new userservice_updateUserInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateUserInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_isContact = function(seqid, input, output) {
  var args = new userservice_isContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isContact.length === 2) {
    Q.fcall(this._handler.isContact, args.userA, args.userB)
      .then(function(result) {
        var result = new userservice_isContact_result({success: result});
        output.writeMessageBegin("isContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_isContact_result(err);
        output.writeMessageBegin("isContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isContact(args.userA, args.userB,  function (err, result) {
      var result = new userservice_isContact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isContact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_sendContactRequest = function(seqid, input, output) {
  var args = new userservice_sendContactRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendContactRequest.length === 3) {
    Q.fcall(this._handler.sendContactRequest, args.sender, args.receiver, args.message)
      .then(function(result) {
        var result = new userservice_sendContactRequest_result({success: result});
        output.writeMessageBegin("sendContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_sendContactRequest_result(err);
        output.writeMessageBegin("sendContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendContactRequest(args.sender, args.receiver, args.message,  function (err, result) {
      var result = new userservice_sendContactRequest_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sendContactRequest", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_acceptContactRequest = function(seqid, input, output) {
  var args = new userservice_acceptContactRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acceptContactRequest.length === 1) {
    Q.fcall(this._handler.acceptContactRequest, args.requestId)
      .then(function(result) {
        var result = new userservice_acceptContactRequest_result({success: result});
        output.writeMessageBegin("acceptContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_acceptContactRequest_result(err);
        output.writeMessageBegin("acceptContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acceptContactRequest(args.requestId,  function (err, result) {
      var result = new userservice_acceptContactRequest_result((err != null ? err : {success: result}));
      output.writeMessageBegin("acceptContactRequest", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_rejectContactRequest = function(seqid, input, output) {
  var args = new userservice_rejectContactRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rejectContactRequest.length === 2) {
    Q.fcall(this._handler.rejectContactRequest, args.requestId, args.message)
      .then(function(result) {
        var result = new userservice_rejectContactRequest_result({success: result});
        output.writeMessageBegin("rejectContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_rejectContactRequest_result(err);
        output.writeMessageBegin("rejectContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rejectContactRequest(args.requestId, args.message,  function (err, result) {
      var result = new userservice_rejectContactRequest_result((err != null ? err : {success: result}));
      output.writeMessageBegin("rejectContactRequest", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_cancelContactRequest = function(seqid, input, output) {
  var args = new userservice_cancelContactRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancelContactRequest.length === 1) {
    Q.fcall(this._handler.cancelContactRequest, args.requestId)
      .then(function(result) {
        var result = new userservice_cancelContactRequest_result({success: result});
        output.writeMessageBegin("cancelContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_cancelContactRequest_result(err);
        output.writeMessageBegin("cancelContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancelContactRequest(args.requestId,  function (err, result) {
      var result = new userservice_cancelContactRequest_result((err != null ? err : {success: result}));
      output.writeMessageBegin("cancelContactRequest", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getContactRequests = function(seqid, input, output) {
  var args = new userservice_getContactRequests_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContactRequests.length === 3) {
    Q.fcall(this._handler.getContactRequests, args.userId, args.offset, args.limit)
      .then(function(result) {
        var result = new userservice_getContactRequests_result({success: result});
        output.writeMessageBegin("getContactRequests", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getContactRequests_result(err);
        output.writeMessageBegin("getContactRequests", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContactRequests(args.userId, args.offset, args.limit,  function (err, result) {
      var result = new userservice_getContactRequests_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getContactRequests", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_addContact = function(seqid, input, output) {
  var args = new userservice_addContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addContact.length === 2) {
    Q.fcall(this._handler.addContact, args.userA, args.userB)
      .then(function(result) {
        var result = new userservice_addContact_result({success: result});
        output.writeMessageBegin("addContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_addContact_result(err);
        output.writeMessageBegin("addContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addContact(args.userA, args.userB,  function (err, result) {
      var result = new userservice_addContact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addContact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_addContacts = function(seqid, input, output) {
  var args = new userservice_addContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addContacts.length === 2) {
    Q.fcall(this._handler.addContacts, args.userA, args.targets)
      .then(function(result) {
        var result = new userservice_addContacts_result({success: result});
        output.writeMessageBegin("addContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_addContacts_result(err);
        output.writeMessageBegin("addContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addContacts(args.userA, args.targets,  function (err, result) {
      var result = new userservice_addContacts_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addContacts", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_removeContact = function(seqid, input, output) {
  var args = new userservice_removeContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeContact.length === 2) {
    Q.fcall(this._handler.removeContact, args.userA, args.userB)
      .then(function(result) {
        var result = new userservice_removeContact_result({success: result});
        output.writeMessageBegin("removeContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_removeContact_result(err);
        output.writeMessageBegin("removeContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeContact(args.userA, args.userB,  function (err, result) {
      var result = new userservice_removeContact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeContact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_removeContacts = function(seqid, input, output) {
  var args = new userservice_removeContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeContacts.length === 2) {
    Q.fcall(this._handler.removeContacts, args.userA, args.targets)
      .then(function(result) {
        var result = new userservice_removeContacts_result({success: result});
        output.writeMessageBegin("removeContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_removeContacts_result(err);
        output.writeMessageBegin("removeContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeContacts(args.userA, args.targets,  function (err, result) {
      var result = new userservice_removeContacts_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeContacts", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getContactList = function(seqid, input, output) {
  var args = new userservice_getContactList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContactList.length === 4) {
    Q.fcall(this._handler.getContactList, args.userId, args.fields, args.offset, args.count)
      .then(function(result) {
        var result = new userservice_getContactList_result({success: result});
        output.writeMessageBegin("getContactList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getContactList_result(err);
        output.writeMessageBegin("getContactList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContactList(args.userId, args.fields, args.offset, args.count,  function (err, result) {
      var result = new userservice_getContactList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getContactList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getContactCount = function(seqid, input, output) {
  var args = new userservice_getContactCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContactCount.length === 1) {
    Q.fcall(this._handler.getContactCount, args.userId)
      .then(function(result) {
        var result = new userservice_getContactCount_result({success: result});
        output.writeMessageBegin("getContactCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getContactCount_result(err);
        output.writeMessageBegin("getContactCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContactCount(args.userId,  function (err, result) {
      var result = new userservice_getContactCount_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getContactCount", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_login = function(seqid, input, output) {
  var args = new userservice_login_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.login.length === 3) {
    Q.fcall(this._handler.login, args.loginName, args.password, args.source)
      .then(function(result) {
        var result = new userservice_login_result({success: result});
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_login_result(err);
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.login(args.loginName, args.password, args.source,  function (err, result) {
      var result = new userservice_login_result((err != null ? err : {success: result}));
      output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_verifyCredential = function(seqid, input, output) {
  var args = new userservice_verifyCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyCredential.length === 2) {
    Q.fcall(this._handler.verifyCredential, args.userId, args.password)
      .then(function(result) {
        var result = new userservice_verifyCredential_result({success: result});
        output.writeMessageBegin("verifyCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_verifyCredential_result(err);
        output.writeMessageBegin("verifyCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyCredential(args.userId, args.password,  function (err, result) {
      var result = new userservice_verifyCredential_result((err != null ? err : {success: result}));
      output.writeMessageBegin("verifyCredential", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_sendValidationCode = function(seqid, input, output) {
  var args = new userservice_sendValidationCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendValidationCode.length === 4) {
    Q.fcall(this._handler.sendValidationCode, args.action, args.countryCode, args.tel, args.userId)
      .then(function(result) {
        var result = new userservice_sendValidationCode_result({success: result});
        output.writeMessageBegin("sendValidationCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_sendValidationCode_result(err);
        output.writeMessageBegin("sendValidationCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendValidationCode(args.action, args.countryCode, args.tel, args.userId,  function (err, result) {
      var result = new userservice_sendValidationCode_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sendValidationCode", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_checkValidationCode = function(seqid, input, output) {
  var args = new userservice_checkValidationCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkValidationCode.length === 5) {
    Q.fcall(this._handler.checkValidationCode, args.code, args.action, args.countryCode, args.tel, args.userId)
      .then(function(result) {
        var result = new userservice_checkValidationCode_result({success: result});
        output.writeMessageBegin("checkValidationCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_checkValidationCode_result(err);
        output.writeMessageBegin("checkValidationCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkValidationCode(args.code, args.action, args.countryCode, args.tel, args.userId,  function (err, result) {
      var result = new userservice_checkValidationCode_result((err != null ? err : {success: result}));
      output.writeMessageBegin("checkValidationCode", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_resetPassword = function(seqid, input, output) {
  var args = new userservice_resetPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resetPassword.length === 3) {
    Q.fcall(this._handler.resetPassword, args.userId, args.oldPassword, args.newPassword)
      .then(function(result) {
        var result = new userservice_resetPassword_result({success: result});
        output.writeMessageBegin("resetPassword", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_resetPassword_result(err);
        output.writeMessageBegin("resetPassword", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resetPassword(args.userId, args.oldPassword, args.newPassword,  function (err, result) {
      var result = new userservice_resetPassword_result((err != null ? err : {success: result}));
      output.writeMessageBegin("resetPassword", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_resetPasswordByToken = function(seqid, input, output) {
  var args = new userservice_resetPasswordByToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resetPasswordByToken.length === 3) {
    Q.fcall(this._handler.resetPasswordByToken, args.userId, args.newPassword, args.token)
      .then(function(result) {
        var result = new userservice_resetPasswordByToken_result({success: result});
        output.writeMessageBegin("resetPasswordByToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_resetPasswordByToken_result(err);
        output.writeMessageBegin("resetPasswordByToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resetPasswordByToken(args.userId, args.newPassword, args.token,  function (err, result) {
      var result = new userservice_resetPasswordByToken_result((err != null ? err : {success: result}));
      output.writeMessageBegin("resetPasswordByToken", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateTelNumber = function(seqid, input, output) {
  var args = new userservice_updateTelNumber_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateTelNumber.length === 3) {
    Q.fcall(this._handler.updateTelNumber, args.userId, args.tel, args.token)
      .then(function(result) {
        var result = new userservice_updateTelNumber_result({success: result});
        output.writeMessageBegin("updateTelNumber", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_updateTelNumber_result(err);
        output.writeMessageBegin("updateTelNumber", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateTelNumber(args.userId, args.tel, args.token,  function (err, result) {
      var result = new userservice_updateTelNumber_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateTelNumber", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_createUser = function(seqid, input, output) {
  var args = new userservice_createUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUser.length === 3) {
    Q.fcall(this._handler.createUser, args.nickName, args.password, args.miscInfo)
      .then(function(result) {
        var result = new userservice_createUser_result({success: result});
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_createUser_result(err);
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUser(args.nickName, args.password, args.miscInfo,  function (err, result) {
      var result = new userservice_createUser_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_searchUserInfo = function(seqid, input, output) {
  var args = new userservice_searchUserInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchUserInfo.length === 4) {
    Q.fcall(this._handler.searchUserInfo, args.queryFields, args.fields, args.offset, args.count)
      .then(function(result) {
        var result = new userservice_searchUserInfo_result({success: result});
        output.writeMessageBegin("searchUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_searchUserInfo_result(err);
        output.writeMessageBegin("searchUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchUserInfo(args.queryFields, args.fields, args.offset, args.count,  function (err, result) {
      var result = new userservice_searchUserInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("searchUserInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_createChatGroup = function(seqid, input, output) {
  var args = new userservice_createChatGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createChatGroup.length === 3) {
    Q.fcall(this._handler.createChatGroup, args.creator, args.participants, args.chatGroupProps)
      .then(function(result) {
        var result = new userservice_createChatGroup_result({success: result});
        output.writeMessageBegin("createChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_createChatGroup_result(err);
        output.writeMessageBegin("createChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createChatGroup(args.creator, args.participants, args.chatGroupProps,  function (err, result) {
      var result = new userservice_createChatGroup_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createChatGroup", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateChatGroup = function(seqid, input, output) {
  var args = new userservice_updateChatGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateChatGroup.length === 2) {
    Q.fcall(this._handler.updateChatGroup, args.chatGroupId, args.chatGroupProps)
      .then(function(result) {
        var result = new userservice_updateChatGroup_result({success: result});
        output.writeMessageBegin("updateChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_updateChatGroup_result(err);
        output.writeMessageBegin("updateChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateChatGroup(args.chatGroupId, args.chatGroupProps,  function (err, result) {
      var result = new userservice_updateChatGroup_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateChatGroup", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getChatGroup = function(seqid, input, output) {
  var args = new userservice_getChatGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatGroup.length === 2) {
    Q.fcall(this._handler.getChatGroup, args.chatGroupId, args.fields)
      .then(function(result) {
        var result = new userservice_getChatGroup_result({success: result});
        output.writeMessageBegin("getChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getChatGroup_result(err);
        output.writeMessageBegin("getChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatGroup(args.chatGroupId, args.fields,  function (err, result) {
      var result = new userservice_getChatGroup_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getChatGroup", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getChatGroups = function(seqid, input, output) {
  var args = new userservice_getChatGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatGroups.length === 2) {
    Q.fcall(this._handler.getChatGroups, args.groupIdList, args.fields)
      .then(function(result) {
        var result = new userservice_getChatGroups_result({success: result});
        output.writeMessageBegin("getChatGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getChatGroups_result(err);
        output.writeMessageBegin("getChatGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatGroups(args.groupIdList, args.fields,  function (err, result) {
      var result = new userservice_getChatGroups_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getChatGroups", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUserChatGroups = function(seqid, input, output) {
  var args = new userservice_getUserChatGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserChatGroups.length === 4) {
    Q.fcall(this._handler.getUserChatGroups, args.userId, args.fields, args.offset, args.count)
      .then(function(result) {
        var result = new userservice_getUserChatGroups_result({success: result});
        output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getUserChatGroups_result(err);
        output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserChatGroups(args.userId, args.fields, args.offset, args.count,  function (err, result) {
      var result = new userservice_getUserChatGroups_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUserChatGroupCount = function(seqid, input, output) {
  var args = new userservice_getUserChatGroupCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserChatGroupCount.length === 1) {
    Q.fcall(this._handler.getUserChatGroupCount, args.userId)
      .then(function(result) {
        var result = new userservice_getUserChatGroupCount_result({success: result});
        output.writeMessageBegin("getUserChatGroupCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getUserChatGroupCount_result(err);
        output.writeMessageBegin("getUserChatGroupCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserChatGroupCount(args.userId,  function (err, result) {
      var result = new userservice_getUserChatGroupCount_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserChatGroupCount", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_addChatGroupMembers = function(seqid, input, output) {
  var args = new userservice_addChatGroupMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addChatGroupMembers.length === 3) {
    Q.fcall(this._handler.addChatGroupMembers, args.chatGroupId, args.operatorId, args.userIds)
      .then(function(result) {
        var result = new userservice_addChatGroupMembers_result({success: result});
        output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_addChatGroupMembers_result(err);
        output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addChatGroupMembers(args.chatGroupId, args.operatorId, args.userIds,  function (err, result) {
      var result = new userservice_addChatGroupMembers_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_removeChatGroupMembers = function(seqid, input, output) {
  var args = new userservice_removeChatGroupMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeChatGroupMembers.length === 3) {
    Q.fcall(this._handler.removeChatGroupMembers, args.chatGroupId, args.operatorId, args.userIds)
      .then(function(result) {
        var result = new userservice_removeChatGroupMembers_result({success: result});
        output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_removeChatGroupMembers_result(err);
        output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeChatGroupMembers(args.chatGroupId, args.operatorId, args.userIds,  function (err, result) {
      var result = new userservice_removeChatGroupMembers_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getChatGroupMembers = function(seqid, input, output) {
  var args = new userservice_getChatGroupMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatGroupMembers.length === 2) {
    Q.fcall(this._handler.getChatGroupMembers, args.chatGroupId, args.fields)
      .then(function(result) {
        var result = new userservice_getChatGroupMembers_result({success: result});
        output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getChatGroupMembers_result(err);
        output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatGroupMembers(args.chatGroupId, args.fields,  function (err, result) {
      var result = new userservice_getChatGroupMembers_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

