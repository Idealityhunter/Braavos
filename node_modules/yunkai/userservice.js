//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./users_types');
//HELPER FUNCTIONS AND STRUCTURES

userservice_ping_args = function(args) {
};
userservice_ping_args.prototype = {};
userservice_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_ping_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
userservice_ping_result.prototype = {};
userservice_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_ping_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserById_args = function(args) {
  this.userId = null;
  this.fields = null;
  this.selfId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
    if (args.selfId !== undefined && args.selfId !== null) {
      this.selfId = args.selfId;
    }
  }
};
userservice_getUserById_args.prototype = {};
userservice_getUserById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.fields = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI32();
          this.fields.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.selfId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserById_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserById_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter47 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter47))
      {
        iter47 = this.fields[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selfId !== null && this.selfId !== undefined) {
    output.writeFieldBegin('selfId', Thrift.Type.I64, 3);
    output.writeI64(this.selfId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserById_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserInfo(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_getUserById_result.prototype = {};
userservice_getUserById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserById_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUsersById_args = function(args) {
  this.userIdList = null;
  this.fields = null;
  this.selfId = null;
  if (args) {
    if (args.userIdList !== undefined && args.userIdList !== null) {
      this.userIdList = Thrift.copyList(args.userIdList, [null]);
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
    if (args.selfId !== undefined && args.selfId !== null) {
      this.selfId = args.selfId;
    }
  }
};
userservice_getUsersById_args.prototype = {};
userservice_getUsersById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.userIdList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readI64();
          this.userIdList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size55 = 0;
        var _rtmp359;
        this.fields = [];
        var _etype58 = 0;
        _rtmp359 = input.readListBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = input.readI32();
          this.fields.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.selfId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUsersById_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUsersById_args');
  if (this.userIdList !== null && this.userIdList !== undefined) {
    output.writeFieldBegin('userIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.userIdList.length);
    for (var iter62 in this.userIdList)
    {
      if (this.userIdList.hasOwnProperty(iter62))
      {
        iter62 = this.userIdList[iter62];
        output.writeI64(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter63 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter63))
      {
        iter63 = this.fields[iter63];
        output.writeI32(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selfId !== null && this.selfId !== undefined) {
    output.writeFieldBegin('selfId', Thrift.Type.I64, 3);
    output.writeI64(this.selfId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUsersById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.UserInfo]);
    }
  }
};
userservice_getUsersById_result.prototype = {};
userservice_getUsersById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size64 = 0;
        var _rtmp368;
        this.success = {};
        var _ktype65 = 0;
        var _vtype66 = 0;
        _rtmp368 = input.readMapBegin();
        _ktype65 = _rtmp368.ktype;
        _vtype66 = _rtmp368.vtype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var key70 = null;
          var val71 = null;
          key70 = input.readI64();
          val71 = new ttypes.UserInfo();
          val71.read(input);
          this.success[key70] = val71;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUsersById_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUsersById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter72 in this.success)
    {
      if (this.success.hasOwnProperty(kiter72))
      {
        var viter73 = this.success[kiter72];
        output.writeI64(kiter72);
        viter73.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateUserInfo_args = function(args) {
  this.userId = null;
  this.userInfo = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.userInfo !== undefined && args.userInfo !== null) {
      this.userInfo = Thrift.copyMap(args.userInfo, [null]);
    }
  }
};
userservice_updateUserInfo_args.prototype = {};
userservice_updateUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size74 = 0;
        var _rtmp378;
        this.userInfo = {};
        var _ktype75 = 0;
        var _vtype76 = 0;
        _rtmp378 = input.readMapBegin();
        _ktype75 = _rtmp378.ktype;
        _vtype76 = _rtmp378.vtype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var key80 = null;
          var val81 = null;
          key80 = input.readI32();
          val81 = input.readString();
          this.userInfo[key80] = val81;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateUserInfo_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.userInfo !== null && this.userInfo !== undefined) {
    output.writeFieldBegin('userInfo', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.userInfo));
    for (var kiter82 in this.userInfo)
    {
      if (this.userInfo.hasOwnProperty(kiter82))
      {
        var viter83 = this.userInfo[kiter82];
        output.writeI32(kiter82);
        output.writeString(viter83);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateUserInfo_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserInfo(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_updateUserInfo_result.prototype = {};
userservice_updateUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.NotFoundException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateUserInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateUserRoles_args = function(args) {
  this.userId = null;
  this.addUser = null;
  this.roles = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.addUser !== undefined && args.addUser !== null) {
      this.addUser = args.addUser;
    }
    if (args.roles !== undefined && args.roles !== null) {
      this.roles = Thrift.copyList(args.roles, [null]);
    }
  }
};
userservice_updateUserRoles_args.prototype = {};
userservice_updateUserRoles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.addUser = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.roles = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readI32();
          this.roles.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateUserRoles_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateUserRoles_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.addUser !== null && this.addUser !== undefined) {
    output.writeFieldBegin('addUser', Thrift.Type.BOOL, 2);
    output.writeBool(this.addUser);
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.roles.length);
    for (var iter91 in this.roles)
    {
      if (this.roles.hasOwnProperty(iter91))
      {
        iter91 = this.roles[iter91];
        output.writeI32(iter91);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateUserRoles_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserInfo(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_updateUserRoles_result.prototype = {};
userservice_updateUserRoles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateUserRoles_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateUserRoles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isContact_args = function(args) {
  this.userA = null;
  this.userB = null;
  if (args) {
    if (args.userA !== undefined && args.userA !== null) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined && args.userB !== null) {
      this.userB = args.userB;
    }
  }
};
userservice_isContact_args.prototype = {};
userservice_isContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isContact_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_isContact_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isContact_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_isContact_result.prototype = {};
userservice_isContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isContact_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_isContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_sendContactRequest_args = function(args) {
  this.sender = null;
  this.receiver = null;
  this.message = null;
  if (args) {
    if (args.sender !== undefined && args.sender !== null) {
      this.sender = args.sender;
    }
    if (args.receiver !== undefined && args.receiver !== null) {
      this.receiver = args.receiver;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
userservice_sendContactRequest_args.prototype = {};
userservice_sendContactRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sender = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.receiver = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_sendContactRequest_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_sendContactRequest_args');
  if (this.sender !== null && this.sender !== undefined) {
    output.writeFieldBegin('sender', Thrift.Type.I64, 1);
    output.writeI64(this.sender);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.I64, 2);
    output.writeI64(this.receiver);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_sendContactRequest_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidStateException) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
userservice_sendContactRequest_result.prototype = {};
userservice_sendContactRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.NotFoundException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidStateException();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_sendContactRequest_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_sendContactRequest_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_acceptContactRequest_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
userservice_acceptContactRequest_args.prototype = {};
userservice_acceptContactRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_acceptContactRequest_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_acceptContactRequest_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_acceptContactRequest_result = function(args) {
  this.ex = null;
  this.ex2 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args instanceof ttypes.InvalidStateException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_acceptContactRequest_result.prototype = {};
userservice_acceptContactRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidStateException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_acceptContactRequest_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_acceptContactRequest_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_rejectContactRequest_args = function(args) {
  this.requestId = null;
  this.message = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
userservice_rejectContactRequest_args.prototype = {};
userservice_rejectContactRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_rejectContactRequest_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_rejectContactRequest_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_rejectContactRequest_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidStateException) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
userservice_rejectContactRequest_result.prototype = {};
userservice_rejectContactRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.NotFoundException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidStateException();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_rejectContactRequest_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_rejectContactRequest_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_cancelContactRequest_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
userservice_cancelContactRequest_args.prototype = {};
userservice_cancelContactRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_cancelContactRequest_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_cancelContactRequest_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_cancelContactRequest_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_cancelContactRequest_result.prototype = {};
userservice_cancelContactRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_cancelContactRequest_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_cancelContactRequest_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactRequests_args = function(args) {
  this.userId = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
userservice_getContactRequests_args.prototype = {};
userservice_getContactRequests_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactRequests_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactRequests_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 2);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactRequests_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ContactRequest]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_getContactRequests_result.prototype = {};
userservice_getContactRequests_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.success = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new ttypes.ContactRequest();
          elem98.read(input);
          this.success.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactRequests_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactRequests_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter99 in this.success)
    {
      if (this.success.hasOwnProperty(iter99))
      {
        iter99 = this.success[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContact_args = function(args) {
  this.userA = null;
  this.userB = null;
  if (args) {
    if (args.userA !== undefined && args.userA !== null) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined && args.userB !== null) {
      this.userB = args.userB;
    }
  }
};
userservice_addContact_args.prototype = {};
userservice_addContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContact_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContact_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContact_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_addContact_result.prototype = {};
userservice_addContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContact_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContact_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContacts_args = function(args) {
  this.userA = null;
  this.targets = null;
  if (args) {
    if (args.userA !== undefined && args.userA !== null) {
      this.userA = args.userA;
    }
    if (args.targets !== undefined && args.targets !== null) {
      this.targets = Thrift.copyList(args.targets, [null]);
    }
  }
};
userservice_addContacts_args.prototype = {};
userservice_addContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.targets = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = input.readI64();
          this.targets.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContacts_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContacts_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.targets.length);
    for (var iter107 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter107))
      {
        iter107 = this.targets[iter107];
        output.writeI64(iter107);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContacts_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_addContacts_result.prototype = {};
userservice_addContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContacts_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContacts_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContact_args = function(args) {
  this.userA = null;
  this.userB = null;
  if (args) {
    if (args.userA !== undefined && args.userA !== null) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined && args.userB !== null) {
      this.userB = args.userB;
    }
  }
};
userservice_removeContact_args.prototype = {};
userservice_removeContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContact_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContact_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContact_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_removeContact_result.prototype = {};
userservice_removeContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContact_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContact_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContacts_args = function(args) {
  this.userA = null;
  this.targets = null;
  if (args) {
    if (args.userA !== undefined && args.userA !== null) {
      this.userA = args.userA;
    }
    if (args.targets !== undefined && args.targets !== null) {
      this.targets = Thrift.copyList(args.targets, [null]);
    }
  }
};
userservice_removeContacts_args.prototype = {};
userservice_removeContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.targets = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          elem114 = input.readI64();
          this.targets.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContacts_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContacts_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.targets.length);
    for (var iter115 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter115))
      {
        iter115 = this.targets[iter115];
        output.writeI64(iter115);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContacts_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_removeContacts_result.prototype = {};
userservice_removeContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContacts_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContacts_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactList_args = function(args) {
  this.userId = null;
  this.fields = null;
  this.offset = null;
  this.count = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
userservice_getContactList_args.prototype = {};
userservice_getContactList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.fields = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = input.readI32();
          this.fields.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactList_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactList_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter123 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter123))
      {
        iter123 = this.fields[iter123];
        output.writeI32(iter123);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserInfo]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_getContactList_result.prototype = {};
userservice_getContactList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.success = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new ttypes.UserInfo();
          elem130.read(input);
          this.success.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactList_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter131 in this.success)
    {
      if (this.success.hasOwnProperty(iter131))
      {
        iter131 = this.success[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateMemo_args = function(args) {
  this.userA = null;
  this.userB = null;
  this.memo = null;
  if (args) {
    if (args.userA !== undefined && args.userA !== null) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined && args.userB !== null) {
      this.userB = args.userB;
    }
    if (args.memo !== undefined && args.memo !== null) {
      this.memo = args.memo;
    }
  }
};
userservice_updateMemo_args.prototype = {};
userservice_updateMemo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.memo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateMemo_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateMemo_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  if (this.memo !== null && this.memo !== undefined) {
    output.writeFieldBegin('memo', Thrift.Type.STRING, 3);
    output.writeString(this.memo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateMemo_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_updateMemo_result.prototype = {};
userservice_updateMemo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateMemo_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateMemo_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactCount_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
userservice_getContactCount_args.prototype = {};
userservice_getContactCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactCount_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactCount_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactCount_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_getContactCount_result.prototype = {};
userservice_getContactCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactCount_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_login_args = function(args) {
  this.loginName = null;
  this.password = null;
  this.source = null;
  if (args) {
    if (args.loginName !== undefined && args.loginName !== null) {
      this.loginName = args.loginName;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
  }
};
userservice_login_args.prototype = {};
userservice_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_login_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_login_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 3);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_login_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.AuthException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserInfo(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_login_result.prototype = {};
userservice_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.AuthException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_login_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserSecretKey_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
userservice_getUserSecretKey_args.prototype = {};
userservice_getUserSecretKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserSecretKey_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserSecretKey_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserSecretKey_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_getUserSecretKey_result.prototype = {};
userservice_getUserSecretKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserSecretKey_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserSecretKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_verifyCredential_args = function(args) {
  this.userId = null;
  this.password = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
userservice_verifyCredential_args.prototype = {};
userservice_verifyCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_verifyCredential_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_verifyCredential_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_verifyCredential_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.AuthException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_verifyCredential_result.prototype = {};
userservice_verifyCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.AuthException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_verifyCredential_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_verifyCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_sendValidationCode_args = function(args) {
  this.action = null;
  this.userId = null;
  this.tel = null;
  this.countryCode = null;
  if (args) {
    if (args.action !== undefined && args.action !== null) {
      this.action = args.action;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.tel !== undefined && args.tel !== null) {
      this.tel = args.tel;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
  }
};
userservice_sendValidationCode_args.prototype = {};
userservice_sendValidationCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.countryCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_sendValidationCode_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_sendValidationCode_args');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 3);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.I32, 4);
    output.writeI32(this.countryCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_sendValidationCode_result = function(args) {
  this.ex = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.OverQuotaLimitException) {
    this.ex = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ResourceConflictException) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
userservice_sendValidationCode_result.prototype = {};
userservice_sendValidationCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.OverQuotaLimitException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ResourceConflictException();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_sendValidationCode_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_sendValidationCode_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_checkValidationCode_args = function(args) {
  this.code = null;
  this.action = null;
  this.tel = null;
  this.countryCode = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.action !== undefined && args.action !== null) {
      this.action = args.action;
    }
    if (args.tel !== undefined && args.tel !== null) {
      this.tel = args.tel;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
  }
};
userservice_checkValidationCode_args.prototype = {};
userservice_checkValidationCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.countryCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_checkValidationCode_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_checkValidationCode_args');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 2);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 3);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.I32, 4);
    output.writeI32(this.countryCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_checkValidationCode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.ValidationCodeException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_checkValidationCode_result.prototype = {};
userservice_checkValidationCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.ValidationCodeException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_checkValidationCode_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_checkValidationCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_resetPassword_args = function(args) {
  this.userId = null;
  this.oldPassword = null;
  this.newPassword = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.oldPassword !== undefined && args.oldPassword !== null) {
      this.oldPassword = args.oldPassword;
    }
    if (args.newPassword !== undefined && args.newPassword !== null) {
      this.newPassword = args.newPassword;
    }
  }
};
userservice_resetPassword_args.prototype = {};
userservice_resetPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oldPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_resetPassword_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_resetPassword_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.oldPassword !== null && this.oldPassword !== undefined) {
    output.writeFieldBegin('oldPassword', Thrift.Type.STRING, 2);
    output.writeString(this.oldPassword);
    output.writeFieldEnd();
  }
  if (this.newPassword !== null && this.newPassword !== undefined) {
    output.writeFieldBegin('newPassword', Thrift.Type.STRING, 3);
    output.writeString(this.newPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_resetPassword_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.AuthException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_resetPassword_result.prototype = {};
userservice_resetPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidArgsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.AuthException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_resetPassword_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_resetPassword_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_resetPasswordByToken_args = function(args) {
  this.userId = null;
  this.newPassword = null;
  this.token = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.newPassword !== undefined && args.newPassword !== null) {
      this.newPassword = args.newPassword;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
userservice_resetPasswordByToken_args.prototype = {};
userservice_resetPasswordByToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_resetPasswordByToken_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_resetPasswordByToken_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.newPassword !== null && this.newPassword !== undefined) {
    output.writeFieldBegin('newPassword', Thrift.Type.STRING, 2);
    output.writeString(this.newPassword);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_resetPasswordByToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.AuthException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_resetPasswordByToken_result.prototype = {};
userservice_resetPasswordByToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidArgsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.AuthException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_resetPasswordByToken_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_resetPasswordByToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateTelNumber_args = function(args) {
  this.userId = null;
  this.tel = null;
  this.token = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.tel !== undefined && args.tel !== null) {
      this.tel = args.tel;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
userservice_updateTelNumber_args.prototype = {};
userservice_updateTelNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateTelNumber_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateTelNumber_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 2);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateTelNumber_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.AuthException) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.ResourceConflictException) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
userservice_updateTelNumber_result.prototype = {};
userservice_updateTelNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.NotFoundException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.AuthException();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.ResourceConflictException();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateTelNumber_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateTelNumber_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createUser_args = function(args) {
  this.nickName = null;
  this.password = null;
  this.miscInfo = null;
  if (args) {
    if (args.nickName !== undefined && args.nickName !== null) {
      this.nickName = args.nickName;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.miscInfo !== undefined && args.miscInfo !== null) {
      this.miscInfo = Thrift.copyMap(args.miscInfo, [null]);
    }
  }
};
userservice_createUser_args.prototype = {};
userservice_createUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size132 = 0;
        var _rtmp3136;
        this.miscInfo = {};
        var _ktype133 = 0;
        var _vtype134 = 0;
        _rtmp3136 = input.readMapBegin();
        _ktype133 = _rtmp3136.ktype;
        _vtype134 = _rtmp3136.vtype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var key138 = null;
          var val139 = null;
          key138 = input.readI32();
          val139 = input.readString();
          this.miscInfo[key138] = val139;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createUser_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_createUser_args');
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 1);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.miscInfo !== null && this.miscInfo !== undefined) {
    output.writeFieldBegin('miscInfo', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.miscInfo));
    for (var kiter140 in this.miscInfo)
    {
      if (this.miscInfo.hasOwnProperty(kiter140))
      {
        var viter141 = this.miscInfo[kiter140];
        output.writeI32(kiter140);
        output.writeString(viter141);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createUser_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ResourceConflictException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserInfo(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_createUser_result.prototype = {};
userservice_createUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ResourceConflictException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createUser_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_createUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createUserPoly_args = function(args) {
  this.regType = null;
  this.regName = null;
  this.password = null;
  this.miscInfo = null;
  if (args) {
    if (args.regType !== undefined && args.regType !== null) {
      this.regType = args.regType;
    }
    if (args.regName !== undefined && args.regName !== null) {
      this.regName = args.regName;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.miscInfo !== undefined && args.miscInfo !== null) {
      this.miscInfo = Thrift.copyMap(args.miscInfo, [null]);
    }
  }
};
userservice_createUserPoly_args.prototype = {};
userservice_createUserPoly_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.regType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.regName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size142 = 0;
        var _rtmp3146;
        this.miscInfo = {};
        var _ktype143 = 0;
        var _vtype144 = 0;
        _rtmp3146 = input.readMapBegin();
        _ktype143 = _rtmp3146.ktype;
        _vtype144 = _rtmp3146.vtype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var key148 = null;
          var val149 = null;
          key148 = input.readI32();
          val149 = input.readString();
          this.miscInfo[key148] = val149;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createUserPoly_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_createUserPoly_args');
  if (this.regType !== null && this.regType !== undefined) {
    output.writeFieldBegin('regType', Thrift.Type.STRING, 1);
    output.writeString(this.regType);
    output.writeFieldEnd();
  }
  if (this.regName !== null && this.regName !== undefined) {
    output.writeFieldBegin('regName', Thrift.Type.STRING, 2);
    output.writeString(this.regName);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.miscInfo !== null && this.miscInfo !== undefined) {
    output.writeFieldBegin('miscInfo', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.miscInfo));
    for (var kiter150 in this.miscInfo)
    {
      if (this.miscInfo.hasOwnProperty(kiter150))
      {
        var viter151 = this.miscInfo[kiter150];
        output.writeI32(kiter150);
        output.writeString(viter151);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createUserPoly_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ResourceConflictException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserInfo(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_createUserPoly_result.prototype = {};
userservice_createUserPoly_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ResourceConflictException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvalidArgsException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createUserPoly_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_createUserPoly_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_searchUserInfo_args = function(args) {
  this.queryFields = null;
  this.fields = null;
  this.offset = null;
  this.count = null;
  if (args) {
    if (args.queryFields !== undefined && args.queryFields !== null) {
      this.queryFields = Thrift.copyMap(args.queryFields, [null]);
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
userservice_searchUserInfo_args.prototype = {};
userservice_searchUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size152 = 0;
        var _rtmp3156;
        this.queryFields = {};
        var _ktype153 = 0;
        var _vtype154 = 0;
        _rtmp3156 = input.readMapBegin();
        _ktype153 = _rtmp3156.ktype;
        _vtype154 = _rtmp3156.vtype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var key158 = null;
          var val159 = null;
          key158 = input.readI32();
          val159 = input.readString();
          this.queryFields[key158] = val159;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.fields = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readI32();
          this.fields.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_searchUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_searchUserInfo_args');
  if (this.queryFields !== null && this.queryFields !== undefined) {
    output.writeFieldBegin('queryFields', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.queryFields));
    for (var kiter167 in this.queryFields)
    {
      if (this.queryFields.hasOwnProperty(kiter167))
      {
        var viter168 = this.queryFields[kiter167];
        output.writeI32(kiter167);
        output.writeString(viter168);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter169 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter169))
      {
        iter169 = this.fields[iter169];
        output.writeI32(iter169);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_searchUserInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserInfo]);
    }
  }
};
userservice_searchUserInfo_result.prototype = {};
userservice_searchUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size170 = 0;
        var _rtmp3174;
        this.success = [];
        var _etype173 = 0;
        _rtmp3174 = input.readListBegin();
        _etype173 = _rtmp3174.etype;
        _size170 = _rtmp3174.size;
        for (var _i175 = 0; _i175 < _size170; ++_i175)
        {
          var elem176 = null;
          elem176 = new ttypes.UserInfo();
          elem176.read(input);
          this.success.push(elem176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_searchUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_searchUserInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter177 in this.success)
    {
      if (this.success.hasOwnProperty(iter177))
      {
        iter177 = this.success[iter177];
        iter177.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_loginByOAuth_args = function(args) {
  this.code = null;
  this.source = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
  }
};
userservice_loginByOAuth_args.prototype = {};
userservice_loginByOAuth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_loginByOAuth_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_loginByOAuth_args');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 2);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_loginByOAuth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserInfo(args.success);
    }
  }
};
userservice_loginByOAuth_result.prototype = {};
userservice_loginByOAuth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_loginByOAuth_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_loginByOAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isBlocked_args = function(args) {
  this.selfId = null;
  this.targetId = null;
  if (args) {
    if (args.selfId !== undefined && args.selfId !== null) {
      this.selfId = args.selfId;
    }
    if (args.targetId !== undefined && args.targetId !== null) {
      this.targetId = args.targetId;
    }
  }
};
userservice_isBlocked_args.prototype = {};
userservice_isBlocked_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.selfId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.targetId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isBlocked_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_isBlocked_args');
  if (this.selfId !== null && this.selfId !== undefined) {
    output.writeFieldBegin('selfId', Thrift.Type.I64, 1);
    output.writeI64(this.selfId);
    output.writeFieldEnd();
  }
  if (this.targetId !== null && this.targetId !== undefined) {
    output.writeFieldBegin('targetId', Thrift.Type.I64, 2);
    output.writeI64(this.targetId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isBlocked_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
userservice_isBlocked_result.prototype = {};
userservice_isBlocked_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isBlocked_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_isBlocked_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateBlackList_args = function(args) {
  this.userA = null;
  this.userB = null;
  this.block = null;
  if (args) {
    if (args.userA !== undefined && args.userA !== null) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined && args.userB !== null) {
      this.userB = args.userB;
    }
    if (args.block !== undefined && args.block !== null) {
      this.block = args.block;
    }
  }
};
userservice_updateBlackList_args.prototype = {};
userservice_updateBlackList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.block = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateBlackList_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateBlackList_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  if (this.block !== null && this.block !== undefined) {
    output.writeFieldBegin('block', Thrift.Type.BOOL, 3);
    output.writeBool(this.block);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateBlackList_result = function(args) {
};
userservice_updateBlackList_result.prototype = {};
userservice_updateBlackList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateBlackList_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateBlackList_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createChatGroup_args = function(args) {
  this.creator = null;
  this.participants = null;
  this.chatGroupProps = null;
  if (args) {
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.participants !== undefined && args.participants !== null) {
      this.participants = Thrift.copyList(args.participants, [null]);
    }
    if (args.chatGroupProps !== undefined && args.chatGroupProps !== null) {
      this.chatGroupProps = Thrift.copyMap(args.chatGroupProps, [null]);
    }
  }
};
userservice_createChatGroup_args.prototype = {};
userservice_createChatGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.creator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.participants = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = input.readI64();
          this.participants.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size185 = 0;
        var _rtmp3189;
        this.chatGroupProps = {};
        var _ktype186 = 0;
        var _vtype187 = 0;
        _rtmp3189 = input.readMapBegin();
        _ktype186 = _rtmp3189.ktype;
        _vtype187 = _rtmp3189.vtype;
        _size185 = _rtmp3189.size;
        for (var _i190 = 0; _i190 < _size185; ++_i190)
        {
          var key191 = null;
          var val192 = null;
          key191 = input.readI32();
          val192 = input.readString();
          this.chatGroupProps[key191] = val192;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createChatGroup_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_createChatGroup_args');
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.I64, 1);
    output.writeI64(this.creator);
    output.writeFieldEnd();
  }
  if (this.participants !== null && this.participants !== undefined) {
    output.writeFieldBegin('participants', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.participants.length);
    for (var iter193 in this.participants)
    {
      if (this.participants.hasOwnProperty(iter193))
      {
        iter193 = this.participants[iter193];
        output.writeI64(iter193);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.chatGroupProps !== null && this.chatGroupProps !== undefined) {
    output.writeFieldBegin('chatGroupProps', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.chatGroupProps));
    for (var kiter194 in this.chatGroupProps)
    {
      if (this.chatGroupProps.hasOwnProperty(kiter194))
      {
        var viter195 = this.chatGroupProps[kiter194];
        output.writeI32(kiter194);
        output.writeString(viter195);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createChatGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.NotFoundException) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.GroupMembersLimitException) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChatGroup(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
userservice_createChatGroup_result.prototype = {};
userservice_createChatGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidArgsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.NotFoundException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.GroupMembersLimitException();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createChatGroup_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_createChatGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateChatGroup_args = function(args) {
  this.chatGroupId = null;
  this.operatorId = null;
  this.chatGroupProps = null;
  if (args) {
    if (args.chatGroupId !== undefined && args.chatGroupId !== null) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.operatorId !== undefined && args.operatorId !== null) {
      this.operatorId = args.operatorId;
    }
    if (args.chatGroupProps !== undefined && args.chatGroupProps !== null) {
      this.chatGroupProps = Thrift.copyMap(args.chatGroupProps, [null]);
    }
  }
};
userservice_updateChatGroup_args.prototype = {};
userservice_updateChatGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.operatorId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size196 = 0;
        var _rtmp3200;
        this.chatGroupProps = {};
        var _ktype197 = 0;
        var _vtype198 = 0;
        _rtmp3200 = input.readMapBegin();
        _ktype197 = _rtmp3200.ktype;
        _vtype198 = _rtmp3200.vtype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var key202 = null;
          var val203 = null;
          key202 = input.readI32();
          val203 = input.readString();
          this.chatGroupProps[key202] = val203;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateChatGroup_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateChatGroup_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.I64, 2);
    output.writeI64(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.chatGroupProps !== null && this.chatGroupProps !== undefined) {
    output.writeFieldBegin('chatGroupProps', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.chatGroupProps));
    for (var kiter204 in this.chatGroupProps)
    {
      if (this.chatGroupProps.hasOwnProperty(kiter204))
      {
        var viter205 = this.chatGroupProps[kiter204];
        output.writeI32(kiter204);
        output.writeString(viter205);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateChatGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.NotFoundException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChatGroup(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_updateChatGroup_result.prototype = {};
userservice_updateChatGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidArgsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.NotFoundException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateChatGroup_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateChatGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroup_args = function(args) {
  this.chatGroupId = null;
  this.fields = null;
  if (args) {
    if (args.chatGroupId !== undefined && args.chatGroupId !== null) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
  }
};
userservice_getChatGroup_args.prototype = {};
userservice_getChatGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size206 = 0;
        var _rtmp3210;
        this.fields = [];
        var _etype209 = 0;
        _rtmp3210 = input.readListBegin();
        _etype209 = _rtmp3210.etype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          var elem212 = null;
          elem212 = input.readI32();
          this.fields.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroup_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroup_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter213 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter213))
      {
        iter213 = this.fields[iter213];
        output.writeI32(iter213);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroup_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChatGroup(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_getChatGroup_result.prototype = {};
userservice_getChatGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroup_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroups_args = function(args) {
  this.groupIdList = null;
  this.fields = null;
  if (args) {
    if (args.groupIdList !== undefined && args.groupIdList !== null) {
      this.groupIdList = Thrift.copyList(args.groupIdList, [null]);
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
  }
};
userservice_getChatGroups_args.prototype = {};
userservice_getChatGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size214 = 0;
        var _rtmp3218;
        this.groupIdList = [];
        var _etype217 = 0;
        _rtmp3218 = input.readListBegin();
        _etype217 = _rtmp3218.etype;
        _size214 = _rtmp3218.size;
        for (var _i219 = 0; _i219 < _size214; ++_i219)
        {
          var elem220 = null;
          elem220 = input.readI64();
          this.groupIdList.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size221 = 0;
        var _rtmp3225;
        this.fields = [];
        var _etype224 = 0;
        _rtmp3225 = input.readListBegin();
        _etype224 = _rtmp3225.etype;
        _size221 = _rtmp3225.size;
        for (var _i226 = 0; _i226 < _size221; ++_i226)
        {
          var elem227 = null;
          elem227 = input.readI32();
          this.fields.push(elem227);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroups_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.groupIdList.length);
    for (var iter228 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter228))
      {
        iter228 = this.groupIdList[iter228];
        output.writeI64(iter228);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter229 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter229))
      {
        iter229 = this.fields[iter229];
        output.writeI32(iter229);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroups_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.ChatGroup]);
    }
  }
};
userservice_getChatGroups_result.prototype = {};
userservice_getChatGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size230 = 0;
        var _rtmp3234;
        this.success = {};
        var _ktype231 = 0;
        var _vtype232 = 0;
        _rtmp3234 = input.readMapBegin();
        _ktype231 = _rtmp3234.ktype;
        _vtype232 = _rtmp3234.vtype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var key236 = null;
          var val237 = null;
          key236 = input.readI64();
          val237 = new ttypes.ChatGroup();
          val237.read(input);
          this.success[key236] = val237;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroups_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter238 in this.success)
    {
      if (this.success.hasOwnProperty(kiter238))
      {
        var viter239 = this.success[kiter238];
        output.writeI64(kiter238);
        viter239.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroups_args = function(args) {
  this.userId = null;
  this.fields = null;
  this.offset = null;
  this.count = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
userservice_getUserChatGroups_args.prototype = {};
userservice_getUserChatGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.fields = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = input.readI32();
          this.fields.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroups_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroups_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter247 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter247))
      {
        iter247 = this.fields[iter247];
        output.writeI32(iter247);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroups_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ChatGroup]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_getUserChatGroups_result.prototype = {};
userservice_getUserChatGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size248 = 0;
        var _rtmp3252;
        this.success = [];
        var _etype251 = 0;
        _rtmp3252 = input.readListBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = new ttypes.ChatGroup();
          elem254.read(input);
          this.success.push(elem254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroups_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter255 in this.success)
    {
      if (this.success.hasOwnProperty(iter255))
      {
        iter255 = this.success[iter255];
        iter255.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroupCount_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
userservice_getUserChatGroupCount_args.prototype = {};
userservice_getUserChatGroupCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroupCount_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroupCount_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroupCount_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_getUserChatGroupCount_result.prototype = {};
userservice_getUserChatGroupCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroupCount_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroupCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addChatGroupMembers_args = function(args) {
  this.chatGroupId = null;
  this.operatorId = null;
  this.userIds = null;
  if (args) {
    if (args.chatGroupId !== undefined && args.chatGroupId !== null) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.operatorId !== undefined && args.operatorId !== null) {
      this.operatorId = args.operatorId;
    }
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    }
  }
};
userservice_addChatGroupMembers_args.prototype = {};
userservice_addChatGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.operatorId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.userIds = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = input.readI64();
          this.userIds.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addChatGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_addChatGroupMembers_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.I64, 2);
    output.writeI64(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter263 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter263))
      {
        iter263 = this.userIds[iter263];
        output.writeI64(iter263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addChatGroupMembers_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_addChatGroupMembers_result.prototype = {};
userservice_addChatGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size264 = 0;
        var _rtmp3268;
        this.success = [];
        var _etype267 = 0;
        _rtmp3268 = input.readListBegin();
        _etype267 = _rtmp3268.etype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          var elem270 = null;
          elem270 = input.readI64();
          this.success.push(elem270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addChatGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_addChatGroupMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I64, this.success.length);
    for (var iter271 in this.success)
    {
      if (this.success.hasOwnProperty(iter271))
      {
        iter271 = this.success[iter271];
        output.writeI64(iter271);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeChatGroupMembers_args = function(args) {
  this.chatGroupId = null;
  this.operatorId = null;
  this.userIds = null;
  if (args) {
    if (args.chatGroupId !== undefined && args.chatGroupId !== null) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.operatorId !== undefined && args.operatorId !== null) {
      this.operatorId = args.operatorId;
    }
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    }
  }
};
userservice_removeChatGroupMembers_args.prototype = {};
userservice_removeChatGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.operatorId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.userIds = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = input.readI64();
          this.userIds.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeChatGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeChatGroupMembers_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.I64, 2);
    output.writeI64(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter279 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter279))
      {
        iter279 = this.userIds[iter279];
        output.writeI64(iter279);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeChatGroupMembers_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_removeChatGroupMembers_result.prototype = {};
userservice_removeChatGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.success = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = input.readI64();
          this.success.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeChatGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeChatGroupMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I64, this.success.length);
    for (var iter287 in this.success)
    {
      if (this.success.hasOwnProperty(iter287))
      {
        iter287 = this.success[iter287];
        output.writeI64(iter287);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroupMembers_args = function(args) {
  this.chatGroupId = null;
  this.fields = null;
  this.selfId = null;
  if (args) {
    if (args.chatGroupId !== undefined && args.chatGroupId !== null) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
    if (args.selfId !== undefined && args.selfId !== null) {
      this.selfId = args.selfId;
    }
  }
};
userservice_getChatGroupMembers_args.prototype = {};
userservice_getChatGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.fields = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = input.readI32();
          this.fields.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.selfId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroupMembers_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter295 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter295))
      {
        iter295 = this.fields[iter295];
        output.writeI32(iter295);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selfId !== null && this.selfId !== undefined) {
    output.writeFieldBegin('selfId', Thrift.Type.I64, 3);
    output.writeI64(this.selfId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroupMembers_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserInfo]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
userservice_getChatGroupMembers_result.prototype = {};
userservice_getChatGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.success = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = new ttypes.UserInfo();
          elem302.read(input);
          this.success.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroupMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter303 in this.success)
    {
      if (this.success.hasOwnProperty(iter303))
      {
        iter303 = this.success[iter303];
        iter303.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isMember_args = function(args) {
  this.userId = null;
  this.chatGroupId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.chatGroupId !== undefined && args.chatGroupId !== null) {
      this.chatGroupId = args.chatGroupId;
    }
  }
};
userservice_isMember_args.prototype = {};
userservice_isMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isMember_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_isMember_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 2);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isMember_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
userservice_isMember_result.prototype = {};
userservice_isMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isMember_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_isMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUsersByTelList_args = function(args) {
  this.fields = null;
  this.tels = null;
  if (args) {
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
    if (args.tels !== undefined && args.tels !== null) {
      this.tels = Thrift.copyList(args.tels, [null]);
    }
  }
};
userservice_getUsersByTelList_args.prototype = {};
userservice_getUsersByTelList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.fields = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = input.readI32();
          this.fields.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size311 = 0;
        var _rtmp3315;
        this.tels = [];
        var _etype314 = 0;
        _rtmp3315 = input.readListBegin();
        _etype314 = _rtmp3315.etype;
        _size311 = _rtmp3315.size;
        for (var _i316 = 0; _i316 < _size311; ++_i316)
        {
          var elem317 = null;
          elem317 = input.readString();
          this.tels.push(elem317);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUsersByTelList_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUsersByTelList_args');
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter318 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter318))
      {
        iter318 = this.fields[iter318];
        output.writeI32(iter318);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tels !== null && this.tels !== undefined) {
    output.writeFieldBegin('tels', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tels.length);
    for (var iter319 in this.tels)
    {
      if (this.tels.hasOwnProperty(iter319))
      {
        iter319 = this.tels[iter319];
        output.writeString(iter319);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUsersByTelList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserInfo]);
    }
  }
};
userservice_getUsersByTelList_result.prototype = {};
userservice_getUsersByTelList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.success = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = new ttypes.UserInfo();
          elem326.read(input);
          this.success.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUsersByTelList_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUsersByTelList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter327 in this.success)
    {
      if (this.success.hasOwnProperty(iter327))
      {
        iter327 = this.success[iter327];
        iter327.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userserviceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
userserviceClient.prototype = {};
userserviceClient.prototype.seqid = function() { return this._seqid; }
userserviceClient.prototype.new_seqid = function() { return this._seqid += 1; }
userserviceClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

userserviceClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ping failed: unknown result');
};
userserviceClient.prototype.getUserById = function(userId, fields, selfId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserById(userId, fields, selfId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserById(userId, fields, selfId);
  }
};

userserviceClient.prototype.send_getUserById = function(userId, fields, selfId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserById', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUserById_args();
  args.userId = userId;
  args.fields = fields;
  args.selfId = selfId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUserById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUserById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserById failed: unknown result');
};
userserviceClient.prototype.getUsersById = function(userIdList, fields, selfId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUsersById(userIdList, fields, selfId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUsersById(userIdList, fields, selfId);
  }
};

userserviceClient.prototype.send_getUsersById = function(userIdList, fields, selfId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUsersById', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUsersById_args();
  args.userIdList = userIdList;
  args.fields = fields;
  args.selfId = selfId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUsersById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUsersById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUsersById failed: unknown result');
};
userserviceClient.prototype.updateUserInfo = function(userId, userInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUserInfo(userId, userInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUserInfo(userId, userInfo);
  }
};

userserviceClient.prototype.send_updateUserInfo = function(userId, userInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUserInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateUserInfo_args();
  args.userId = userId;
  args.userInfo = userInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateUserInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateUserInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateUserInfo failed: unknown result');
};
userserviceClient.prototype.updateUserRoles = function(userId, addUser, roles, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUserRoles(userId, addUser, roles);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUserRoles(userId, addUser, roles);
  }
};

userserviceClient.prototype.send_updateUserRoles = function(userId, addUser, roles) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUserRoles', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateUserRoles_args();
  args.userId = userId;
  args.addUser = addUser;
  args.roles = roles;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateUserRoles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateUserRoles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateUserRoles failed: unknown result');
};
userserviceClient.prototype.isContact = function(userA, userB, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isContact(userA, userB);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isContact(userA, userB);
  }
};

userserviceClient.prototype.send_isContact = function(userA, userB) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isContact', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_isContact_args();
  args.userA = userA;
  args.userB = userB;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_isContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_isContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isContact failed: unknown result');
};
userserviceClient.prototype.sendContactRequest = function(sender, receiver, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendContactRequest(sender, receiver, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendContactRequest(sender, receiver, message);
  }
};

userserviceClient.prototype.send_sendContactRequest = function(sender, receiver, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendContactRequest', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_sendContactRequest_args();
  args.sender = sender;
  args.receiver = receiver;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_sendContactRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_sendContactRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendContactRequest failed: unknown result');
};
userserviceClient.prototype.acceptContactRequest = function(requestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acceptContactRequest(requestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acceptContactRequest(requestId);
  }
};

userserviceClient.prototype.send_acceptContactRequest = function(requestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acceptContactRequest', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_acceptContactRequest_args();
  args.requestId = requestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_acceptContactRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_acceptContactRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
userserviceClient.prototype.rejectContactRequest = function(requestId, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rejectContactRequest(requestId, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rejectContactRequest(requestId, message);
  }
};

userserviceClient.prototype.send_rejectContactRequest = function(requestId, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rejectContactRequest', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_rejectContactRequest_args();
  args.requestId = requestId;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_rejectContactRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_rejectContactRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  callback(null)
};
userserviceClient.prototype.cancelContactRequest = function(requestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelContactRequest(requestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelContactRequest(requestId);
  }
};

userserviceClient.prototype.send_cancelContactRequest = function(requestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelContactRequest', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_cancelContactRequest_args();
  args.requestId = requestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_cancelContactRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_cancelContactRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.getContactRequests = function(userId, offset, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContactRequests(userId, offset, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContactRequests(userId, offset, limit);
  }
};

userserviceClient.prototype.send_getContactRequests = function(userId, offset, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContactRequests', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getContactRequests_args();
  args.userId = userId;
  args.offset = offset;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getContactRequests = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getContactRequests_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContactRequests failed: unknown result');
};
userserviceClient.prototype.addContact = function(userA, userB, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addContact(userA, userB);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addContact(userA, userB);
  }
};

userserviceClient.prototype.send_addContact = function(userA, userB) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addContact', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_addContact_args();
  args.userA = userA;
  args.userB = userB;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_addContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_addContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.addContacts = function(userA, targets, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addContacts(userA, targets);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addContacts(userA, targets);
  }
};

userserviceClient.prototype.send_addContacts = function(userA, targets) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_addContacts_args();
  args.userA = userA;
  args.targets = targets;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_addContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_addContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.removeContact = function(userA, userB, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeContact(userA, userB);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeContact(userA, userB);
  }
};

userserviceClient.prototype.send_removeContact = function(userA, userB) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeContact', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_removeContact_args();
  args.userA = userA;
  args.userB = userB;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_removeContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_removeContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.removeContacts = function(userA, targets, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeContacts(userA, targets);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeContacts(userA, targets);
  }
};

userserviceClient.prototype.send_removeContacts = function(userA, targets) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_removeContacts_args();
  args.userA = userA;
  args.targets = targets;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_removeContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_removeContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.getContactList = function(userId, fields, offset, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContactList(userId, fields, offset, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContactList(userId, fields, offset, count);
  }
};

userserviceClient.prototype.send_getContactList = function(userId, fields, offset, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContactList', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getContactList_args();
  args.userId = userId;
  args.fields = fields;
  args.offset = offset;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getContactList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getContactList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContactList failed: unknown result');
};
userserviceClient.prototype.updateMemo = function(userA, userB, memo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateMemo(userA, userB, memo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateMemo(userA, userB, memo);
  }
};

userserviceClient.prototype.send_updateMemo = function(userA, userB, memo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateMemo', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateMemo_args();
  args.userA = userA;
  args.userB = userB;
  args.memo = memo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateMemo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateMemo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.getContactCount = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContactCount(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContactCount(userId);
  }
};

userserviceClient.prototype.send_getContactCount = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContactCount', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getContactCount_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getContactCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getContactCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContactCount failed: unknown result');
};
userserviceClient.prototype.login = function(loginName, password, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_login(loginName, password, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_login(loginName, password, source);
  }
};

userserviceClient.prototype.send_login = function(loginName, password, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_login_args();
  args.loginName = loginName;
  args.password = password;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('login failed: unknown result');
};
userserviceClient.prototype.getUserSecretKey = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserSecretKey(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserSecretKey(userId);
  }
};

userserviceClient.prototype.send_getUserSecretKey = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserSecretKey', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUserSecretKey_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUserSecretKey = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUserSecretKey_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserSecretKey failed: unknown result');
};
userserviceClient.prototype.verifyCredential = function(userId, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyCredential(userId, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyCredential(userId, password);
  }
};

userserviceClient.prototype.send_verifyCredential = function(userId, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_verifyCredential_args();
  args.userId = userId;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_verifyCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_verifyCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyCredential failed: unknown result');
};
userserviceClient.prototype.sendValidationCode = function(action, userId, tel, countryCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendValidationCode(action, userId, tel, countryCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendValidationCode(action, userId, tel, countryCode);
  }
};

userserviceClient.prototype.send_sendValidationCode = function(action, userId, tel, countryCode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendValidationCode', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_sendValidationCode_args();
  args.action = action;
  args.userId = userId;
  args.tel = tel;
  args.countryCode = countryCode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_sendValidationCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_sendValidationCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  callback(null)
};
userserviceClient.prototype.checkValidationCode = function(code, action, tel, countryCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkValidationCode(code, action, tel, countryCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkValidationCode(code, action, tel, countryCode);
  }
};

userserviceClient.prototype.send_checkValidationCode = function(code, action, tel, countryCode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkValidationCode', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_checkValidationCode_args();
  args.code = code;
  args.action = action;
  args.tel = tel;
  args.countryCode = countryCode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_checkValidationCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_checkValidationCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkValidationCode failed: unknown result');
};
userserviceClient.prototype.resetPassword = function(userId, oldPassword, newPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resetPassword(userId, oldPassword, newPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resetPassword(userId, oldPassword, newPassword);
  }
};

userserviceClient.prototype.send_resetPassword = function(userId, oldPassword, newPassword) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resetPassword', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_resetPassword_args();
  args.userId = userId;
  args.oldPassword = oldPassword;
  args.newPassword = newPassword;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_resetPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_resetPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
userserviceClient.prototype.resetPasswordByToken = function(userId, newPassword, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resetPasswordByToken(userId, newPassword, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resetPasswordByToken(userId, newPassword, token);
  }
};

userserviceClient.prototype.send_resetPasswordByToken = function(userId, newPassword, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resetPasswordByToken', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_resetPasswordByToken_args();
  args.userId = userId;
  args.newPassword = newPassword;
  args.token = token;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_resetPasswordByToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_resetPasswordByToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
userserviceClient.prototype.updateTelNumber = function(userId, tel, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateTelNumber(userId, tel, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateTelNumber(userId, tel, token);
  }
};

userserviceClient.prototype.send_updateTelNumber = function(userId, tel, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateTelNumber', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateTelNumber_args();
  args.userId = userId;
  args.tel = tel;
  args.token = token;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateTelNumber = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateTelNumber_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  callback(null)
};
userserviceClient.prototype.createUser = function(nickName, password, miscInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUser(nickName, password, miscInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUser(nickName, password, miscInfo);
  }
};

userserviceClient.prototype.send_createUser = function(nickName, password, miscInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUser', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_createUser_args();
  args.nickName = nickName;
  args.password = password;
  args.miscInfo = miscInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_createUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_createUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUser failed: unknown result');
};
userserviceClient.prototype.createUserPoly = function(regType, regName, password, miscInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUserPoly(regType, regName, password, miscInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUserPoly(regType, regName, password, miscInfo);
  }
};

userserviceClient.prototype.send_createUserPoly = function(regType, regName, password, miscInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUserPoly', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_createUserPoly_args();
  args.regType = regType;
  args.regName = regName;
  args.password = password;
  args.miscInfo = miscInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_createUserPoly = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_createUserPoly_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUserPoly failed: unknown result');
};
userserviceClient.prototype.searchUserInfo = function(queryFields, fields, offset, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchUserInfo(queryFields, fields, offset, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchUserInfo(queryFields, fields, offset, count);
  }
};

userserviceClient.prototype.send_searchUserInfo = function(queryFields, fields, offset, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchUserInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_searchUserInfo_args();
  args.queryFields = queryFields;
  args.fields = fields;
  args.offset = offset;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_searchUserInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_searchUserInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchUserInfo failed: unknown result');
};
userserviceClient.prototype.loginByOAuth = function(code, source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loginByOAuth(code, source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loginByOAuth(code, source);
  }
};

userserviceClient.prototype.send_loginByOAuth = function(code, source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loginByOAuth', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_loginByOAuth_args();
  args.code = code;
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_loginByOAuth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_loginByOAuth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loginByOAuth failed: unknown result');
};
userserviceClient.prototype.isBlocked = function(selfId, targetId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isBlocked(selfId, targetId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isBlocked(selfId, targetId);
  }
};

userserviceClient.prototype.send_isBlocked = function(selfId, targetId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isBlocked', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_isBlocked_args();
  args.selfId = selfId;
  args.targetId = targetId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_isBlocked = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_isBlocked_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isBlocked failed: unknown result');
};
userserviceClient.prototype.updateBlackList = function(userA, userB, block, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBlackList(userA, userB, block);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBlackList(userA, userB, block);
  }
};

userserviceClient.prototype.send_updateBlackList = function(userA, userB, block) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBlackList', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateBlackList_args();
  args.userA = userA;
  args.userB = userB;
  args.block = block;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateBlackList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateBlackList_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
userserviceClient.prototype.createChatGroup = function(creator, participants, chatGroupProps, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createChatGroup(creator, participants, chatGroupProps);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createChatGroup(creator, participants, chatGroupProps);
  }
};

userserviceClient.prototype.send_createChatGroup = function(creator, participants, chatGroupProps) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createChatGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_createChatGroup_args();
  args.creator = creator;
  args.participants = participants;
  args.chatGroupProps = chatGroupProps;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_createChatGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_createChatGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createChatGroup failed: unknown result');
};
userserviceClient.prototype.updateChatGroup = function(chatGroupId, operatorId, chatGroupProps, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateChatGroup(chatGroupId, operatorId, chatGroupProps);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateChatGroup(chatGroupId, operatorId, chatGroupProps);
  }
};

userserviceClient.prototype.send_updateChatGroup = function(chatGroupId, operatorId, chatGroupProps) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateChatGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateChatGroup_args();
  args.chatGroupId = chatGroupId;
  args.operatorId = operatorId;
  args.chatGroupProps = chatGroupProps;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateChatGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateChatGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateChatGroup failed: unknown result');
};
userserviceClient.prototype.getChatGroup = function(chatGroupId, fields, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatGroup(chatGroupId, fields);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatGroup(chatGroupId, fields);
  }
};

userserviceClient.prototype.send_getChatGroup = function(chatGroupId, fields) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getChatGroup_args();
  args.chatGroupId = chatGroupId;
  args.fields = fields;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getChatGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getChatGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatGroup failed: unknown result');
};
userserviceClient.prototype.getChatGroups = function(groupIdList, fields, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatGroups(groupIdList, fields);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatGroups(groupIdList, fields);
  }
};

userserviceClient.prototype.send_getChatGroups = function(groupIdList, fields) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getChatGroups_args();
  args.groupIdList = groupIdList;
  args.fields = fields;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getChatGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getChatGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatGroups failed: unknown result');
};
userserviceClient.prototype.getUserChatGroups = function(userId, fields, offset, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserChatGroups(userId, fields, offset, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserChatGroups(userId, fields, offset, count);
  }
};

userserviceClient.prototype.send_getUserChatGroups = function(userId, fields, offset, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserChatGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUserChatGroups_args();
  args.userId = userId;
  args.fields = fields;
  args.offset = offset;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUserChatGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUserChatGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserChatGroups failed: unknown result');
};
userserviceClient.prototype.getUserChatGroupCount = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserChatGroupCount(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserChatGroupCount(userId);
  }
};

userserviceClient.prototype.send_getUserChatGroupCount = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserChatGroupCount', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUserChatGroupCount_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUserChatGroupCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUserChatGroupCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserChatGroupCount failed: unknown result');
};
userserviceClient.prototype.addChatGroupMembers = function(chatGroupId, operatorId, userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addChatGroupMembers(chatGroupId, operatorId, userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addChatGroupMembers(chatGroupId, operatorId, userIds);
  }
};

userserviceClient.prototype.send_addChatGroupMembers = function(chatGroupId, operatorId, userIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addChatGroupMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_addChatGroupMembers_args();
  args.chatGroupId = chatGroupId;
  args.operatorId = operatorId;
  args.userIds = userIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_addChatGroupMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_addChatGroupMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addChatGroupMembers failed: unknown result');
};
userserviceClient.prototype.removeChatGroupMembers = function(chatGroupId, operatorId, userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeChatGroupMembers(chatGroupId, operatorId, userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeChatGroupMembers(chatGroupId, operatorId, userIds);
  }
};

userserviceClient.prototype.send_removeChatGroupMembers = function(chatGroupId, operatorId, userIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeChatGroupMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_removeChatGroupMembers_args();
  args.chatGroupId = chatGroupId;
  args.operatorId = operatorId;
  args.userIds = userIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_removeChatGroupMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_removeChatGroupMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('removeChatGroupMembers failed: unknown result');
};
userserviceClient.prototype.getChatGroupMembers = function(chatGroupId, fields, selfId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatGroupMembers(chatGroupId, fields, selfId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatGroupMembers(chatGroupId, fields, selfId);
  }
};

userserviceClient.prototype.send_getChatGroupMembers = function(chatGroupId, fields, selfId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatGroupMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getChatGroupMembers_args();
  args.chatGroupId = chatGroupId;
  args.fields = fields;
  args.selfId = selfId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getChatGroupMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getChatGroupMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatGroupMembers failed: unknown result');
};
userserviceClient.prototype.isMember = function(userId, chatGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isMember(userId, chatGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isMember(userId, chatGroupId);
  }
};

userserviceClient.prototype.send_isMember = function(userId, chatGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isMember', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_isMember_args();
  args.userId = userId;
  args.chatGroupId = chatGroupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_isMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_isMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isMember failed: unknown result');
};
userserviceClient.prototype.getUsersByTelList = function(fields, tels, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUsersByTelList(fields, tels);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUsersByTelList(fields, tels);
  }
};

userserviceClient.prototype.send_getUsersByTelList = function(fields, tels) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUsersByTelList', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUsersByTelList_args();
  args.fields = fields;
  args.tels = tels;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUsersByTelList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUsersByTelList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUsersByTelList failed: unknown result');
};
userserviceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
userserviceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

userserviceProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new userservice_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping)
      .then(function(result) {
        var result = new userservice_ping_result({success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ping(function (err, result) {
      if (err == null) {
        var result = new userservice_ping_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUserById = function(seqid, input, output) {
  var args = new userservice_getUserById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserById.length === 3) {
    Q.fcall(this._handler.getUserById, args.userId, args.fields, args.selfId)
      .then(function(result) {
        var result = new userservice_getUserById_result({success: result});
        output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_getUserById_result(err);
          output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserById", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserById(args.userId, args.fields, args.selfId, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_getUserById_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUsersById = function(seqid, input, output) {
  var args = new userservice_getUsersById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUsersById.length === 3) {
    Q.fcall(this._handler.getUsersById, args.userIdList, args.fields, args.selfId)
      .then(function(result) {
        var result = new userservice_getUsersById_result({success: result});
        output.writeMessageBegin("getUsersById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUsersById", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUsersById(args.userIdList, args.fields, args.selfId, function (err, result) {
      if (err == null) {
        var result = new userservice_getUsersById_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUsersById", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUsersById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateUserInfo = function(seqid, input, output) {
  var args = new userservice_updateUserInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUserInfo.length === 2) {
    Q.fcall(this._handler.updateUserInfo, args.userId, args.userInfo)
      .then(function(result) {
        var result = new userservice_updateUserInfo_result({success: result});
        output.writeMessageBegin("updateUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidArgsException) {
          var result = new userservice_updateUserInfo_result(err);
          output.writeMessageBegin("updateUserInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateUserInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUserInfo(args.userId, args.userInfo, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidArgsException) {
        var result = new userservice_updateUserInfo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateUserInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUserInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateUserRoles = function(seqid, input, output) {
  var args = new userservice_updateUserRoles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUserRoles.length === 3) {
    Q.fcall(this._handler.updateUserRoles, args.userId, args.addUser, args.roles)
      .then(function(result) {
        var result = new userservice_updateUserRoles_result({success: result});
        output.writeMessageBegin("updateUserRoles", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_updateUserRoles_result(err);
          output.writeMessageBegin("updateUserRoles", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateUserRoles", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUserRoles(args.userId, args.addUser, args.roles, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_updateUserRoles_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateUserRoles", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUserRoles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_isContact = function(seqid, input, output) {
  var args = new userservice_isContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isContact.length === 2) {
    Q.fcall(this._handler.isContact, args.userA, args.userB)
      .then(function(result) {
        var result = new userservice_isContact_result({success: result});
        output.writeMessageBegin("isContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_isContact_result(err);
          output.writeMessageBegin("isContact", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isContact(args.userA, args.userB, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_isContact_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isContact", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_sendContactRequest = function(seqid, input, output) {
  var args = new userservice_sendContactRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendContactRequest.length === 3) {
    Q.fcall(this._handler.sendContactRequest, args.sender, args.receiver, args.message)
      .then(function(result) {
        var result = new userservice_sendContactRequest_result({success: result});
        output.writeMessageBegin("sendContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.InvalidStateException) {
          var result = new userservice_sendContactRequest_result(err);
          output.writeMessageBegin("sendContactRequest", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendContactRequest", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendContactRequest(args.sender, args.receiver, args.message, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.InvalidStateException) {
        var result = new userservice_sendContactRequest_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendContactRequest", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendContactRequest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_acceptContactRequest = function(seqid, input, output) {
  var args = new userservice_acceptContactRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acceptContactRequest.length === 1) {
    Q.fcall(this._handler.acceptContactRequest, args.requestId)
      .then(function(result) {
        var result = new userservice_acceptContactRequest_result({success: result});
        output.writeMessageBegin("acceptContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidStateException) {
          var result = new userservice_acceptContactRequest_result(err);
          output.writeMessageBegin("acceptContactRequest", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acceptContactRequest", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acceptContactRequest(args.requestId, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidStateException) {
        var result = new userservice_acceptContactRequest_result((err != null ? err : {success: result}));
        output.writeMessageBegin("acceptContactRequest", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acceptContactRequest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_rejectContactRequest = function(seqid, input, output) {
  var args = new userservice_rejectContactRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rejectContactRequest.length === 2) {
    Q.fcall(this._handler.rejectContactRequest, args.requestId, args.message)
      .then(function(result) {
        var result = new userservice_rejectContactRequest_result({success: result});
        output.writeMessageBegin("rejectContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.InvalidStateException) {
          var result = new userservice_rejectContactRequest_result(err);
          output.writeMessageBegin("rejectContactRequest", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rejectContactRequest", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rejectContactRequest(args.requestId, args.message, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.InvalidStateException) {
        var result = new userservice_rejectContactRequest_result((err != null ? err : {success: result}));
        output.writeMessageBegin("rejectContactRequest", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rejectContactRequest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_cancelContactRequest = function(seqid, input, output) {
  var args = new userservice_cancelContactRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancelContactRequest.length === 1) {
    Q.fcall(this._handler.cancelContactRequest, args.requestId)
      .then(function(result) {
        var result = new userservice_cancelContactRequest_result({success: result});
        output.writeMessageBegin("cancelContactRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_cancelContactRequest_result(err);
          output.writeMessageBegin("cancelContactRequest", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cancelContactRequest", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancelContactRequest(args.requestId, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_cancelContactRequest_result((err != null ? err : {success: result}));
        output.writeMessageBegin("cancelContactRequest", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancelContactRequest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getContactRequests = function(seqid, input, output) {
  var args = new userservice_getContactRequests_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContactRequests.length === 3) {
    Q.fcall(this._handler.getContactRequests, args.userId, args.offset, args.limit)
      .then(function(result) {
        var result = new userservice_getContactRequests_result({success: result});
        output.writeMessageBegin("getContactRequests", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_getContactRequests_result(err);
          output.writeMessageBegin("getContactRequests", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContactRequests", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContactRequests(args.userId, args.offset, args.limit, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_getContactRequests_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getContactRequests", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContactRequests", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_addContact = function(seqid, input, output) {
  var args = new userservice_addContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addContact.length === 2) {
    Q.fcall(this._handler.addContact, args.userA, args.userB)
      .then(function(result) {
        var result = new userservice_addContact_result({success: result});
        output.writeMessageBegin("addContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_addContact_result(err);
          output.writeMessageBegin("addContact", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addContact(args.userA, args.userB, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_addContact_result((err != null ? err : {success: result}));
        output.writeMessageBegin("addContact", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_addContacts = function(seqid, input, output) {
  var args = new userservice_addContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addContacts.length === 2) {
    Q.fcall(this._handler.addContacts, args.userA, args.targets)
      .then(function(result) {
        var result = new userservice_addContacts_result({success: result});
        output.writeMessageBegin("addContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_addContacts_result(err);
          output.writeMessageBegin("addContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addContacts(args.userA, args.targets, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_addContacts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("addContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_removeContact = function(seqid, input, output) {
  var args = new userservice_removeContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeContact.length === 2) {
    Q.fcall(this._handler.removeContact, args.userA, args.userB)
      .then(function(result) {
        var result = new userservice_removeContact_result({success: result});
        output.writeMessageBegin("removeContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_removeContact_result(err);
          output.writeMessageBegin("removeContact", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeContact(args.userA, args.userB, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_removeContact_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeContact", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_removeContacts = function(seqid, input, output) {
  var args = new userservice_removeContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeContacts.length === 2) {
    Q.fcall(this._handler.removeContacts, args.userA, args.targets)
      .then(function(result) {
        var result = new userservice_removeContacts_result({success: result});
        output.writeMessageBegin("removeContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_removeContacts_result(err);
          output.writeMessageBegin("removeContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeContacts(args.userA, args.targets, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_removeContacts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getContactList = function(seqid, input, output) {
  var args = new userservice_getContactList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContactList.length === 4) {
    Q.fcall(this._handler.getContactList, args.userId, args.fields, args.offset, args.count)
      .then(function(result) {
        var result = new userservice_getContactList_result({success: result});
        output.writeMessageBegin("getContactList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_getContactList_result(err);
          output.writeMessageBegin("getContactList", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContactList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContactList(args.userId, args.fields, args.offset, args.count, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_getContactList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getContactList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContactList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateMemo = function(seqid, input, output) {
  var args = new userservice_updateMemo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateMemo.length === 3) {
    Q.fcall(this._handler.updateMemo, args.userA, args.userB, args.memo)
      .then(function(result) {
        var result = new userservice_updateMemo_result({success: result});
        output.writeMessageBegin("updateMemo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_updateMemo_result(err);
          output.writeMessageBegin("updateMemo", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateMemo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateMemo(args.userA, args.userB, args.memo, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_updateMemo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateMemo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateMemo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getContactCount = function(seqid, input, output) {
  var args = new userservice_getContactCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContactCount.length === 1) {
    Q.fcall(this._handler.getContactCount, args.userId)
      .then(function(result) {
        var result = new userservice_getContactCount_result({success: result});
        output.writeMessageBegin("getContactCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_getContactCount_result(err);
          output.writeMessageBegin("getContactCount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContactCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContactCount(args.userId, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_getContactCount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getContactCount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContactCount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_login = function(seqid, input, output) {
  var args = new userservice_login_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.login.length === 3) {
    Q.fcall(this._handler.login, args.loginName, args.password, args.source)
      .then(function(result) {
        var result = new userservice_login_result({success: result});
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.AuthException) {
          var result = new userservice_login_result(err);
          output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("login", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.login(args.loginName, args.password, args.source, function (err, result) {
      if (err == null || err instanceof ttypes.AuthException) {
        var result = new userservice_login_result((err != null ? err : {success: result}));
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("login", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUserSecretKey = function(seqid, input, output) {
  var args = new userservice_getUserSecretKey_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserSecretKey.length === 1) {
    Q.fcall(this._handler.getUserSecretKey, args.userId)
      .then(function(result) {
        var result = new userservice_getUserSecretKey_result({success: result});
        output.writeMessageBegin("getUserSecretKey", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_getUserSecretKey_result(err);
          output.writeMessageBegin("getUserSecretKey", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserSecretKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserSecretKey(args.userId, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_getUserSecretKey_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserSecretKey", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserSecretKey", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_verifyCredential = function(seqid, input, output) {
  var args = new userservice_verifyCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyCredential.length === 2) {
    Q.fcall(this._handler.verifyCredential, args.userId, args.password)
      .then(function(result) {
        var result = new userservice_verifyCredential_result({success: result});
        output.writeMessageBegin("verifyCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.AuthException) {
          var result = new userservice_verifyCredential_result(err);
          output.writeMessageBegin("verifyCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyCredential(args.userId, args.password, function (err, result) {
      if (err == null || err instanceof ttypes.AuthException) {
        var result = new userservice_verifyCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("verifyCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_sendValidationCode = function(seqid, input, output) {
  var args = new userservice_sendValidationCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendValidationCode.length === 4) {
    Q.fcall(this._handler.sendValidationCode, args.action, args.userId, args.tel, args.countryCode)
      .then(function(result) {
        var result = new userservice_sendValidationCode_result({success: result});
        output.writeMessageBegin("sendValidationCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.OverQuotaLimitException || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.ResourceConflictException) {
          var result = new userservice_sendValidationCode_result(err);
          output.writeMessageBegin("sendValidationCode", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendValidationCode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendValidationCode(args.action, args.userId, args.tel, args.countryCode, function (err, result) {
      if (err == null || err instanceof ttypes.OverQuotaLimitException || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.ResourceConflictException) {
        var result = new userservice_sendValidationCode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendValidationCode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendValidationCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_checkValidationCode = function(seqid, input, output) {
  var args = new userservice_checkValidationCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkValidationCode.length === 4) {
    Q.fcall(this._handler.checkValidationCode, args.code, args.action, args.tel, args.countryCode)
      .then(function(result) {
        var result = new userservice_checkValidationCode_result({success: result});
        output.writeMessageBegin("checkValidationCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ValidationCodeException) {
          var result = new userservice_checkValidationCode_result(err);
          output.writeMessageBegin("checkValidationCode", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkValidationCode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkValidationCode(args.code, args.action, args.tel, args.countryCode, function (err, result) {
      if (err == null || err instanceof ttypes.ValidationCodeException) {
        var result = new userservice_checkValidationCode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkValidationCode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkValidationCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_resetPassword = function(seqid, input, output) {
  var args = new userservice_resetPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resetPassword.length === 3) {
    Q.fcall(this._handler.resetPassword, args.userId, args.oldPassword, args.newPassword)
      .then(function(result) {
        var result = new userservice_resetPassword_result({success: result});
        output.writeMessageBegin("resetPassword", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidArgsException || err instanceof ttypes.AuthException) {
          var result = new userservice_resetPassword_result(err);
          output.writeMessageBegin("resetPassword", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("resetPassword", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resetPassword(args.userId, args.oldPassword, args.newPassword, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.AuthException) {
        var result = new userservice_resetPassword_result((err != null ? err : {success: result}));
        output.writeMessageBegin("resetPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resetPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_resetPasswordByToken = function(seqid, input, output) {
  var args = new userservice_resetPasswordByToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resetPasswordByToken.length === 3) {
    Q.fcall(this._handler.resetPasswordByToken, args.userId, args.newPassword, args.token)
      .then(function(result) {
        var result = new userservice_resetPasswordByToken_result({success: result});
        output.writeMessageBegin("resetPasswordByToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidArgsException || err instanceof ttypes.AuthException) {
          var result = new userservice_resetPasswordByToken_result(err);
          output.writeMessageBegin("resetPasswordByToken", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("resetPasswordByToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resetPasswordByToken(args.userId, args.newPassword, args.token, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.AuthException) {
        var result = new userservice_resetPasswordByToken_result((err != null ? err : {success: result}));
        output.writeMessageBegin("resetPasswordByToken", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resetPasswordByToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateTelNumber = function(seqid, input, output) {
  var args = new userservice_updateTelNumber_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateTelNumber.length === 3) {
    Q.fcall(this._handler.updateTelNumber, args.userId, args.tel, args.token)
      .then(function(result) {
        var result = new userservice_updateTelNumber_result({success: result});
        output.writeMessageBegin("updateTelNumber", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.AuthException || err instanceof ttypes.ResourceConflictException) {
          var result = new userservice_updateTelNumber_result(err);
          output.writeMessageBegin("updateTelNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateTelNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateTelNumber(args.userId, args.tel, args.token, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.AuthException || err instanceof ttypes.ResourceConflictException) {
        var result = new userservice_updateTelNumber_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateTelNumber", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateTelNumber", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_createUser = function(seqid, input, output) {
  var args = new userservice_createUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUser.length === 3) {
    Q.fcall(this._handler.createUser, args.nickName, args.password, args.miscInfo)
      .then(function(result) {
        var result = new userservice_createUser_result({success: result});
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceConflictException || err instanceof ttypes.InvalidArgsException) {
          var result = new userservice_createUser_result(err);
          output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUser(args.nickName, args.password, args.miscInfo, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceConflictException || err instanceof ttypes.InvalidArgsException) {
        var result = new userservice_createUser_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_createUserPoly = function(seqid, input, output) {
  var args = new userservice_createUserPoly_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUserPoly.length === 4) {
    Q.fcall(this._handler.createUserPoly, args.regType, args.regName, args.password, args.miscInfo)
      .then(function(result) {
        var result = new userservice_createUserPoly_result({success: result});
        output.writeMessageBegin("createUserPoly", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceConflictException || err instanceof ttypes.InvalidArgsException) {
          var result = new userservice_createUserPoly_result(err);
          output.writeMessageBegin("createUserPoly", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createUserPoly", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUserPoly(args.regType, args.regName, args.password, args.miscInfo, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceConflictException || err instanceof ttypes.InvalidArgsException) {
        var result = new userservice_createUserPoly_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createUserPoly", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUserPoly", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_searchUserInfo = function(seqid, input, output) {
  var args = new userservice_searchUserInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchUserInfo.length === 4) {
    Q.fcall(this._handler.searchUserInfo, args.queryFields, args.fields, args.offset, args.count)
      .then(function(result) {
        var result = new userservice_searchUserInfo_result({success: result});
        output.writeMessageBegin("searchUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchUserInfo", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchUserInfo(args.queryFields, args.fields, args.offset, args.count, function (err, result) {
      if (err == null) {
        var result = new userservice_searchUserInfo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("searchUserInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchUserInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_loginByOAuth = function(seqid, input, output) {
  var args = new userservice_loginByOAuth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loginByOAuth.length === 2) {
    Q.fcall(this._handler.loginByOAuth, args.code, args.source)
      .then(function(result) {
        var result = new userservice_loginByOAuth_result({success: result});
        output.writeMessageBegin("loginByOAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginByOAuth", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loginByOAuth(args.code, args.source, function (err, result) {
      if (err == null) {
        var result = new userservice_loginByOAuth_result((err != null ? err : {success: result}));
        output.writeMessageBegin("loginByOAuth", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginByOAuth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_isBlocked = function(seqid, input, output) {
  var args = new userservice_isBlocked_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isBlocked.length === 2) {
    Q.fcall(this._handler.isBlocked, args.selfId, args.targetId)
      .then(function(result) {
        var result = new userservice_isBlocked_result({success: result});
        output.writeMessageBegin("isBlocked", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isBlocked", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isBlocked(args.selfId, args.targetId, function (err, result) {
      if (err == null) {
        var result = new userservice_isBlocked_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isBlocked", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isBlocked", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateBlackList = function(seqid, input, output) {
  var args = new userservice_updateBlackList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBlackList.length === 3) {
    Q.fcall(this._handler.updateBlackList, args.userA, args.userB, args.block)
      .then(function(result) {
        var result = new userservice_updateBlackList_result({success: result});
        output.writeMessageBegin("updateBlackList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBlackList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBlackList(args.userA, args.userB, args.block, function (err, result) {
      if (err == null) {
        var result = new userservice_updateBlackList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBlackList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBlackList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_createChatGroup = function(seqid, input, output) {
  var args = new userservice_createChatGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createChatGroup.length === 3) {
    Q.fcall(this._handler.createChatGroup, args.creator, args.participants, args.chatGroupProps)
      .then(function(result) {
        var result = new userservice_createChatGroup_result({success: result});
        output.writeMessageBegin("createChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidArgsException || err instanceof ttypes.NotFoundException || err instanceof ttypes.GroupMembersLimitException) {
          var result = new userservice_createChatGroup_result(err);
          output.writeMessageBegin("createChatGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createChatGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createChatGroup(args.creator, args.participants, args.chatGroupProps, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.NotFoundException || err instanceof ttypes.GroupMembersLimitException) {
        var result = new userservice_createChatGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createChatGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createChatGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateChatGroup = function(seqid, input, output) {
  var args = new userservice_updateChatGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateChatGroup.length === 3) {
    Q.fcall(this._handler.updateChatGroup, args.chatGroupId, args.operatorId, args.chatGroupProps)
      .then(function(result) {
        var result = new userservice_updateChatGroup_result({success: result});
        output.writeMessageBegin("updateChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidArgsException || err instanceof ttypes.NotFoundException) {
          var result = new userservice_updateChatGroup_result(err);
          output.writeMessageBegin("updateChatGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateChatGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateChatGroup(args.chatGroupId, args.operatorId, args.chatGroupProps, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidArgsException || err instanceof ttypes.NotFoundException) {
        var result = new userservice_updateChatGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateChatGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateChatGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getChatGroup = function(seqid, input, output) {
  var args = new userservice_getChatGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatGroup.length === 2) {
    Q.fcall(this._handler.getChatGroup, args.chatGroupId, args.fields)
      .then(function(result) {
        var result = new userservice_getChatGroup_result({success: result});
        output.writeMessageBegin("getChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_getChatGroup_result(err);
          output.writeMessageBegin("getChatGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChatGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatGroup(args.chatGroupId, args.fields, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_getChatGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getChatGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChatGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getChatGroups = function(seqid, input, output) {
  var args = new userservice_getChatGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatGroups.length === 2) {
    Q.fcall(this._handler.getChatGroups, args.groupIdList, args.fields)
      .then(function(result) {
        var result = new userservice_getChatGroups_result({success: result});
        output.writeMessageBegin("getChatGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChatGroups", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatGroups(args.groupIdList, args.fields, function (err, result) {
      if (err == null) {
        var result = new userservice_getChatGroups_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getChatGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChatGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUserChatGroups = function(seqid, input, output) {
  var args = new userservice_getUserChatGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserChatGroups.length === 4) {
    Q.fcall(this._handler.getUserChatGroups, args.userId, args.fields, args.offset, args.count)
      .then(function(result) {
        var result = new userservice_getUserChatGroups_result({success: result});
        output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_getUserChatGroups_result(err);
          output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserChatGroups(args.userId, args.fields, args.offset, args.count, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_getUserChatGroups_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUserChatGroupCount = function(seqid, input, output) {
  var args = new userservice_getUserChatGroupCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserChatGroupCount.length === 1) {
    Q.fcall(this._handler.getUserChatGroupCount, args.userId)
      .then(function(result) {
        var result = new userservice_getUserChatGroupCount_result({success: result});
        output.writeMessageBegin("getUserChatGroupCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_getUserChatGroupCount_result(err);
          output.writeMessageBegin("getUserChatGroupCount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserChatGroupCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserChatGroupCount(args.userId, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_getUserChatGroupCount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserChatGroupCount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserChatGroupCount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_addChatGroupMembers = function(seqid, input, output) {
  var args = new userservice_addChatGroupMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addChatGroupMembers.length === 3) {
    Q.fcall(this._handler.addChatGroupMembers, args.chatGroupId, args.operatorId, args.userIds)
      .then(function(result) {
        var result = new userservice_addChatGroupMembers_result({success: result});
        output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_addChatGroupMembers_result(err);
          output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addChatGroupMembers(args.chatGroupId, args.operatorId, args.userIds, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_addChatGroupMembers_result((err != null ? err : {success: result}));
        output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_removeChatGroupMembers = function(seqid, input, output) {
  var args = new userservice_removeChatGroupMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeChatGroupMembers.length === 3) {
    Q.fcall(this._handler.removeChatGroupMembers, args.chatGroupId, args.operatorId, args.userIds)
      .then(function(result) {
        var result = new userservice_removeChatGroupMembers_result({success: result});
        output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_removeChatGroupMembers_result(err);
          output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeChatGroupMembers(args.chatGroupId, args.operatorId, args.userIds, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_removeChatGroupMembers_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getChatGroupMembers = function(seqid, input, output) {
  var args = new userservice_getChatGroupMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatGroupMembers.length === 3) {
    Q.fcall(this._handler.getChatGroupMembers, args.chatGroupId, args.fields, args.selfId)
      .then(function(result) {
        var result = new userservice_getChatGroupMembers_result({success: result});
        output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NotFoundException) {
          var result = new userservice_getChatGroupMembers_result(err);
          output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatGroupMembers(args.chatGroupId, args.fields, args.selfId, function (err, result) {
      if (err == null || err instanceof ttypes.NotFoundException) {
        var result = new userservice_getChatGroupMembers_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_isMember = function(seqid, input, output) {
  var args = new userservice_isMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isMember.length === 2) {
    Q.fcall(this._handler.isMember, args.userId, args.chatGroupId)
      .then(function(result) {
        var result = new userservice_isMember_result({success: result});
        output.writeMessageBegin("isMember", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isMember", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isMember(args.userId, args.chatGroupId, function (err, result) {
      if (err == null) {
        var result = new userservice_isMember_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isMember", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUsersByTelList = function(seqid, input, output) {
  var args = new userservice_getUsersByTelList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUsersByTelList.length === 2) {
    Q.fcall(this._handler.getUsersByTelList, args.fields, args.tels)
      .then(function(result) {
        var result = new userservice_getUsersByTelList_result({success: result});
        output.writeMessageBegin("getUsersByTelList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUsersByTelList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUsersByTelList(args.fields, args.tels, function (err, result) {
      if (err == null) {
        var result = new userservice_getUsersByTelList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUsersByTelList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUsersByTelList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

