//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.Gender = {
  'MALE' : 0,
  'FEMALE' : 1,
  'SECRET' : 2
};
ttypes.GroupType = {
  'CHATGROUP' : 0,
  'FORUM' : 1
};
ttypes.ValidationCodeAction = {
  'SIGNUP' : 1,
  'RESET_PASSWORD' : 2,
  'UPDATE_TEL' : 3
};
ttypes.UserInfoProp = {
  'ID' : 0,
  'USER_ID' : 1,
  'NICK_NAME' : 2,
  'AVATAR' : 3,
  'GENDER' : 4,
  'SIGNATURE' : 5,
  'TEL' : 6,
  'CHAT_GROUPS' : 7
};
ttypes.ChatGroupProp = {
  'ID' : 0,
  'CHAT_GROUP_ID' : 1,
  'NAME' : 2,
  'GROUP_DESC' : 3,
  'AVATAR' : 4,
  'TAGS' : 5,
  'CREATOR' : 6,
  'ADMIN' : 7,
  'PARTICIPANTS' : 8,
  'MAX_USERS' : 9,
  'VISIBLE' : 10
};
ContactRequest = module.exports.ContactRequest = function(args) {
  this.id = null;
  this.sender = null;
  this.receiver = null;
  this.status = null;
  this.requestMessage = null;
  this.rejectMessage = null;
  this.timestamp = null;
  this.expire = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.sender !== undefined) {
      this.sender = args.sender;
    }
    if (args.receiver !== undefined) {
      this.receiver = args.receiver;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.requestMessage !== undefined) {
      this.requestMessage = args.requestMessage;
    }
    if (args.rejectMessage !== undefined) {
      this.rejectMessage = args.rejectMessage;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.expire !== undefined) {
      this.expire = args.expire;
    }
  }
};
ContactRequest.prototype = {};
ContactRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.sender = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.receiver = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.requestMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.rejectMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.expire = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactRequest.prototype.write = function(output) {
  output.writeStructBegin('ContactRequest');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.sender !== null && this.sender !== undefined) {
    output.writeFieldBegin('sender', Thrift.Type.I64, 2);
    output.writeI64(this.sender);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.I64, 3);
    output.writeI64(this.receiver);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.requestMessage !== null && this.requestMessage !== undefined) {
    output.writeFieldBegin('requestMessage', Thrift.Type.STRING, 5);
    output.writeString(this.requestMessage);
    output.writeFieldEnd();
  }
  if (this.rejectMessage !== null && this.rejectMessage !== undefined) {
    output.writeFieldBegin('rejectMessage', Thrift.Type.STRING, 6);
    output.writeString(this.rejectMessage);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 7);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.expire !== null && this.expire !== undefined) {
    output.writeFieldBegin('expire', Thrift.Type.I64, 8);
    output.writeI64(this.expire);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserInfo = module.exports.UserInfo = function(args) {
  this.id = null;
  this.userId = null;
  this.nickName = null;
  this.avatar = null;
  this.gender = null;
  this.signature = null;
  this.tel = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.avatar !== undefined) {
      this.avatar = args.avatar;
    }
    if (args.gender !== undefined) {
      this.gender = args.gender;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
  }
};
UserInfo.prototype = {};
UserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.avatar = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.gender = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInfo.prototype.write = function(output) {
  output.writeStructBegin('UserInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 3);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.avatar !== null && this.avatar !== undefined) {
    output.writeFieldBegin('avatar', Thrift.Type.STRING, 4);
    output.writeString(this.avatar);
    output.writeFieldEnd();
  }
  if (this.gender !== null && this.gender !== undefined) {
    output.writeFieldBegin('gender', Thrift.Type.I32, 5);
    output.writeI32(this.gender);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 6);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 7);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChatGroup = module.exports.ChatGroup = function(args) {
  this.id = null;
  this.chatGroupId = null;
  this.name = null;
  this.groupDesc = null;
  this.avatar = null;
  this.tags = null;
  this.creator = null;
  this.admin = null;
  this.participants = null;
  this.maxUsers = null;
  this.createTime = null;
  this.updateTime = null;
  this.visible = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.groupDesc !== undefined) {
      this.groupDesc = args.groupDesc;
    }
    if (args.avatar !== undefined) {
      this.avatar = args.avatar;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.creator !== undefined) {
      this.creator = args.creator;
    }
    if (args.admin !== undefined) {
      this.admin = args.admin;
    }
    if (args.participants !== undefined) {
      this.participants = args.participants;
    }
    if (args.maxUsers !== undefined) {
      this.maxUsers = args.maxUsers;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.visible !== undefined) {
      this.visible = args.visible;
    }
  }
};
ChatGroup.prototype = {};
ChatGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.groupDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.avatar = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tags = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.tags.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.creator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.admin = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI64();
          this.admin.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.participants = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI64();
          this.participants.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.maxUsers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.updateTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.visible = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatGroup.prototype.write = function(output) {
  output.writeStructBegin('ChatGroup');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 2);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.groupDesc !== null && this.groupDesc !== undefined) {
    output.writeFieldBegin('groupDesc', Thrift.Type.STRING, 4);
    output.writeString(this.groupDesc);
    output.writeFieldEnd();
  }
  if (this.avatar !== null && this.avatar !== undefined) {
    output.writeFieldBegin('avatar', Thrift.Type.STRING, 5);
    output.writeString(this.avatar);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter21 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter21))
      {
        iter21 = this.tags[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.I64, 7);
    output.writeI64(this.creator);
    output.writeFieldEnd();
  }
  if (this.admin !== null && this.admin !== undefined) {
    output.writeFieldBegin('admin', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.I64, this.admin.length);
    for (var iter22 in this.admin)
    {
      if (this.admin.hasOwnProperty(iter22))
      {
        iter22 = this.admin[iter22];
        output.writeI64(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.participants !== null && this.participants !== undefined) {
    output.writeFieldBegin('participants', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.I64, this.participants.length);
    for (var iter23 in this.participants)
    {
      if (this.participants.hasOwnProperty(iter23))
      {
        iter23 = this.participants[iter23];
        output.writeI64(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.maxUsers !== null && this.maxUsers !== undefined) {
    output.writeFieldBegin('maxUsers', Thrift.Type.I32, 10);
    output.writeI32(this.maxUsers);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 11);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.I64, 12);
    output.writeI64(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.visible !== null && this.visible !== undefined) {
    output.writeFieldBegin('visible', Thrift.Type.BOOL, 13);
    output.writeBool(this.visible);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Token = module.exports.Token = function(args) {
  this.fingerprint = null;
  this.action = null;
  this.userId = null;
  this.countryCode = null;
  this.tel = null;
  this.createTime = null;
  if (args) {
    if (args.fingerprint !== undefined) {
      this.fingerprint = args.fingerprint;
    }
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.countryCode !== undefined) {
      this.countryCode = args.countryCode;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
  }
};
Token.prototype = {};
Token.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fingerprint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.countryCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Token.prototype.write = function(output) {
  output.writeStructBegin('Token');
  if (this.fingerprint !== null && this.fingerprint !== undefined) {
    output.writeFieldBegin('fingerprint', Thrift.Type.STRING, 1);
    output.writeString(this.fingerprint);
    output.writeFieldEnd();
  }
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 2);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 3);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.I32, 4);
    output.writeI32(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 5);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 6);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotFoundException = module.exports.NotFoundException = function(args) {
  Thrift.TException.call(this, "NotFoundException")
  this.name = "NotFoundException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NotFoundException, Thrift.TException);
NotFoundException.prototype.name = 'NotFoundException';
NotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotFoundException.prototype.write = function(output) {
  output.writeStructBegin('NotFoundException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidArgsException = module.exports.InvalidArgsException = function(args) {
  Thrift.TException.call(this, "InvalidArgsException")
  this.name = "InvalidArgsException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidArgsException, Thrift.TException);
InvalidArgsException.prototype.name = 'InvalidArgsException';
InvalidArgsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidArgsException.prototype.write = function(output) {
  output.writeStructBegin('InvalidArgsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthException = module.exports.AuthException = function(args) {
  Thrift.TException.call(this, "AuthException")
  this.name = "AuthException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(AuthException, Thrift.TException);
AuthException.prototype.name = 'AuthException';
AuthException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthException.prototype.write = function(output) {
  output.writeStructBegin('AuthException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserExistsException = module.exports.UserExistsException = function(args) {
  Thrift.TException.call(this, "UserExistsException")
  this.name = "UserExistsException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UserExistsException, Thrift.TException);
UserExistsException.prototype.name = 'UserExistsException';
UserExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserExistsException.prototype.write = function(output) {
  output.writeStructBegin('UserExistsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GroupMembersLimitException = module.exports.GroupMembersLimitException = function(args) {
  Thrift.TException.call(this, "GroupMembersLimitException")
  this.name = "GroupMembersLimitException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(GroupMembersLimitException, Thrift.TException);
GroupMembersLimitException.prototype.name = 'GroupMembersLimitException';
GroupMembersLimitException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupMembersLimitException.prototype.write = function(output) {
  output.writeStructBegin('GroupMembersLimitException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidStateException = module.exports.InvalidStateException = function(args) {
  Thrift.TException.call(this, "InvalidStateException")
  this.name = "InvalidStateException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidStateException, Thrift.TException);
InvalidStateException.prototype.name = 'InvalidStateException';
InvalidStateException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidStateException.prototype.write = function(output) {
  output.writeStructBegin('InvalidStateException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ValidationCodeException = module.exports.ValidationCodeException = function(args) {
  Thrift.TException.call(this, "ValidationCodeException")
  this.name = "ValidationCodeException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ValidationCodeException, Thrift.TException);
ValidationCodeException.prototype.name = 'ValidationCodeException';
ValidationCodeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValidationCodeException.prototype.write = function(output) {
  output.writeStructBegin('ValidationCodeException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OverQuotaLimitException = module.exports.OverQuotaLimitException = function(args) {
  Thrift.TException.call(this, "OverQuotaLimitException")
  this.name = "OverQuotaLimitException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(OverQuotaLimitException, Thrift.TException);
OverQuotaLimitException.prototype.name = 'OverQuotaLimitException';
OverQuotaLimitException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OverQuotaLimitException.prototype.write = function(output) {
  output.writeStructBegin('OverQuotaLimitException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

